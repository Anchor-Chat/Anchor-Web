{"version":3,"sources":["webpack:///./node_modules/orbit-db/src/db-manifest.js","webpack:///./node_modules/orbit-db/src/orbit-db-address.js","webpack:///./node_modules/orbit-db/src/access-controller.js","webpack:///./node_modules/orbit-db/src/ipfs-access-controller.js","webpack:///./node_modules/orbit-db-keystore/src/keystore.js","webpack:///./node_modules/orbit-db-keystore/index-browser.js","webpack:///./node_modules/orbit-db-cache/Cache.js","webpack:///./node_modules/orbit-db-cache/node_modules/typedarray-to-buffer/index.js","webpack:///./node_modules/orbit-db-cache/node_modules/xtend/has-keys.js","webpack:///./node_modules/orbit-db-cache/node_modules/object-keys/isArguments.js","webpack:///./node_modules/orbit-db-cache/node_modules/object-keys/foreach.js","webpack:///./node_modules/orbit-db-cache/node_modules/object-keys/shim.js","webpack:///./node_modules/orbit-db-cache/node_modules/object-keys/index.js","webpack:///./node_modules/orbit-db-cache/node_modules/xtend/index.js","webpack:///./node_modules/isbuffer/index.js","webpack:///./node_modules/orbit-db-cache/node_modules/level-js/iterator.js","webpack:///./node_modules/abstract-leveldown/abstract-chained-batch.js","webpack:///./node_modules/abstract-leveldown/abstract-iterator.js","webpack:///./node_modules/abstract-leveldown/node_modules/xtend/index.js","webpack:///./node_modules/idb-wrapper/idbstore.js","webpack:///./node_modules/orbit-db-cache/node_modules/level-js/index.js","webpack:///./node_modules/orbit-db-cache/index-browser.js","webpack:///./node_modules/ipfs-pubsub-room/src/direct-connection-handler.js","webpack:///./node_modules/ipfs-pubsub-room/src/peer-id.js","webpack:///./node_modules/ipfs-pubsub-room/src/connection.js","webpack:///./node_modules/lodash.pullat/index.js","webpack:///./node_modules/hyperdiff/lib/index.js","webpack:///./node_modules/ipfs-pubsub-room/src/index.js","webpack:///./node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","webpack:///./node_modules/orbit-db-pubsub/index.js","webpack:///./node_modules/orbit-db-docstore/node_modules/p-map/index.js","webpack:///./node_modules/orbit-db-docstore/src/DocumentIndex.js","webpack:///./node_modules/orbit-db-docstore/src/DocumentStore.js","webpack:///./node_modules/crdts/src/utils.js","webpack:///./node_modules/orbit-db-counterstore/src/CounterIndex.js","webpack:///./node_modules/orbit-db-counterstore/src/CounterStore.js","webpack:///./node_modules/orbit-db-kvstore/src/KeyValueIndex.js","webpack:///./node_modules/orbit-db-kvstore/src/KeyValueStore.js","webpack:///./node_modules/orbit-db-feedstore/src/FeedIndex.js","webpack:///./node_modules/orbit-db-feedstore/src/FeedStore.js","webpack:///./node_modules/orbit-db-eventstore/src/EventIndex.js","webpack:///./node_modules/orbit-db/src/OrbitDB.js","webpack:///./node_modules/abstract-leveldown/abstract-leveldown.js","webpack:///./node_modules/ipfs-pubsub-room/src/encoding.js","webpack:///./node_modules/ipfs-pubsub-room/src/protocol.js","webpack:///./node_modules/lodash.clonedeep/index.js","webpack:///./node_modules/crdts/src/G-Counter.js","webpack:///./node_modules/orbit-db-eventstore/src/EventStore.js"],"names":["Buffer","path","__webpack_require__","module","exports","async","ipfs","name","type","accessControllerAddress","manifest","accessController","join","object","put","from","JSON","stringify","toJSON","multihash","toString","OrbitDBAddress","[object Object]","root","this","address","parts","split","filter","e","i","indexOf","accessControllerHash","fromB58String","validate","Error","isValid","slice","length","_access","admin","write","read","concat","access","key","push","without","arr","reduce","res","val","AccessController","super","_ipfs","dag","get","obj","parse","data","console","log","hash","ec","EC","LocalStorage","mkdir","create","directory","sync","storage","_storage","id","genKeyPair","publicKey","getPublic","privateKey","getPrivate","setItem","getItem","keyPair","pub","priv","privEnc","pubEnc","Promise","resolve","keyFromPublic","keyFromPrivate","sig","sign","toDER","signature","verify","localStorage","Keystore","Logger","logger","color","Colors","Magenta","setLogLevel","caches","load","dbAddress","debug","dbPath","dataPath","cache","_store","store","reject","open","err","close","destroy","status","value","del","all","Object","values","_augment","TYPED_ARRAY_SUPPORT","source","prototype","str","call","isArguments","callee","hasOwn","hasOwnProperty","fn","isFunc","RegExp","window","setTimeout","alert","confirm","prompt","isFunction","TypeError","k","isString","l","context","arguments","charAt","keysShim","has","forEach","isArgs","hasDontEnumBug","propertyIsEnumerable","hasProtoEnumBug","dontEnums","isObject","theKeys","skipProto","ctor","constructor","skipConstructor","dontEnum","keys","Keys","hasKeys","target","j","o","isBuffer","test","util","AbstractIterator","ltgt","Iterator","db","options","_order","reverse","_limit","limit","_count","_done","lower","lowerBound","upper","upperBound","_keyRange","makeKeyRange","excludeLower","lowerBoundExclusive","excludeUpper","upperBoundExclusive","_keyRangeError","callback","inherits","createIterator","self","iterator","iterate","onItem","apply","keyRange","autoContinue","order","onError","cursor","cursorTransaction","shouldCall","_next","_started","process","AbstractChainedBatch","_db","_operations","_written","_checkWritten","_checkKeyValue","_isBuffer","String","_put","_del","clear","_clear","_write","_batch","nextTick","_ended","_nexting","next","end","_end","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","global","undefined","defaultErrorHandler","error","defaultSuccessHandler","defaults","storeName","storePrefix","dbVersion","keyPath","autoIncrement","onStoreReady","indexes","implementationPreference","IDBStore","kwArgs","dbName","parseInt","env","availableImplementations","implName","implementation","idb","IDBKeyRange","webkitIDBKeyRange","mozIDBKeyRange","consts","READ_ONLY","READ_WRITE","VERSION_CHANGE","NEXT","NEXT_NO_DUPLICATE","PREV","PREV_NO_DUPLICATE","openDB","proto","version","_insertIdCount","openRequest","preventSuccessCallback","onerror","errorEvent","errorCode","hasVersionError","errorMessage","bind","onsuccess","event","result","objectStoreNames","contains","emptyTransaction","transaction","objectStore","existingIndexes","Array","getIndexList","indexData","indexName","normalizeIndexData","hasIndex","actualIndex","index","complies","indexComplies","splice","onupgradeneeded","optionalParameters","createObjectStore","deleteIndex","createIndex","unique","multiEntry","_indexName","deleteDatabase","onSuccess","deleteRequest","putRequest","hasSuccess","putTransaction","oncomplete","onabort","_addIdPropertyIfNeeded","getTransaction","getRequest","remove","removeTransaction","batch","dataArray","count","called","batchTransaction","onItemSuccess","operation","onItemError","abort","putBatch","batchData","map","item","upsertBatch","keyField","record","removeBatch","keyArray","getBatch","arrayType","getAll","getAllTransaction","_getAllNative","_getAllCursor","getAllRequest","cursorRequest","openCursor","clearTransaction","clearRequest","dataObj","Date","now","indexNames","actual","expected","every","exp","act","m","directionType","mixin","filterDuplicates","writeAccess","onEnd","Infinity","offset","allowItemRejection","toLowerCase","cursorTarget","recordCount","advance","onItemReturn","query","processedItems","accept","countRequest","evt","hasLower","hasUpper","isOnly","only","bound","empty","s","Level","IDB","AbstractLevelDOWN","xtend","toBuffer","location","IDBOptions","_open","idbOpts","_get","asBuffer","raw","Uint8Array","ArrayBuffer","convertEncoding","toArrayBuffer","stringed","valEnc","valueEncoding","array","copiedOp","currentOp","modified","converted","_close","_approximateSize","start","prefix","dbname","request","indexedDB","byteLength","level","Cache","pull","emitter","handler","protocol","conn","getPeerInfo","peerInfo","peerId","toB58String","message","msg","emit","topicIDs","isArray","seqno","topic","peer","EventEmitter","Pushable","PROTOCOL","encoding","getPeerId","room","_id","_room","_connection","_connecting","once","_getConnection","_getPeerAddresses","peerAddresses","_libp2pNode","dialProtocol","pushable","swarm","peers","peersAddresses","peerAddress","FUNC_ERROR_TEXT","HASH_UNDEFINED","INFINITY","MAX_SAFE_INTEGER","argsTag","funcTag","genTag","symbolTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","reIsUint","freeGlobal","freeSelf","Function","arrayPush","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","replace","Symbol","spreadableSymbol","isConcatSpreadable","nativeMax","Math","max","Map","getNative","nativeCreate","symbolProto","symbolToString","Hash","entries","entry","set","ListCache","MapCache","assocIndexOf","other","baseGet","isKey","castPath","toKey","baseIsNative","isHostObject","func","toSource","stringToPath","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","isSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","getMapData","__data__","getValue","isFlattenable","isObjectLike","isLength","isArrayLike","isArrayLikeObject","isIndex","parent","baseSlice","pop","string","memoize","baseToString","match","number","quote","last","pullAt","baseFlatten","depth","predicate","isStrict","paths","isNil","baseAt","lastIndex","previous","basePullAt","iteratee","arrayMap","sort","args","otherArgs","thisArg","resolver","memoized","tag","defaultValue","cloneDeep","isPresent","itemIndex","collection","props","findIndexWithProps","findIndex","origItem","prop","hasItemWithProps","orig","dist","first","second","determinateCollections","determinateFindIndex","results","acc","destination","common","removed","added","diff","timers","clone","Connection","directConnection","DEFAULT_OPTIONS","pollInterval","_topic","_options","assign","_peers","_connections","_handleDirectMessage","pubsub","isOnline","_start","on","leave","clearInterval","_interval","stop","removeListener","_message","publish","p","to","_peerInfo","topicCIDs","setInterval","_pollPeers","listener","_onMessage","subscribe","unsubscribe","handle","_newPeers","newPeers","_emitChanges","differences","addedPeer","removedPeer","Room","maxTopicsOpen","topicsOpenCount","_subscriptions","_handleMessage","setMaxListeners","onMessageCallback","onNewPeerCallback","onNewPeer","warn","onMessage","broadcast","content","subscription","topicId","iterable","mapper","opts","concurrency","ret","isRejected","iterableDone","resolvingCount","currentIdx","nextItem","done","then","el","_index","oplog","onProgressCallback","handled","idx","payload","op","Store","DocumentIndex","pMap","replaceAll","search","replacement","indexBy","Index","_type","caseSensitive","terms","docs","doc","_addOperationBatch","saveSnapshot","_addOperation","deepEqual","a","b","propsA","getOwnPropertyNames","propsB","OperationTuple3","Set","json","Counter","createCounter","mergeToIndex","merge","CounterIndex","amount","counter","_counters","increment","includes","KeyValueIndex","f","EventStore","FeedIndex","FeedStore","KeyValueStore","CounterStore","DocumentStore","Pubsub","createDBManifest","databaseTypes","eventlog","feed","docstore","keyvalue","OrbitDB","_idB58String","_pubsub","broker","stores","keystore","getKey","createKey","databases","disconnect","_loadCache","replicate","events","_onWrite","_onClosed","addr","_onPeerConnected","heads","_oplog","sendTo","removeAllListeners","isValidType","add","save","manifestHash","overwrite","_saveDBManifest","localOnly","haveDB","_createStore","browser","_chainedBatch","approximateSize","_setupIteratorOptions","lt","lte","gt","gte","exclusiveStart","_iterator","LARGE_ARRAY_SIZE","boolTag","dateTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","cloneableTags","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","mapToArray","size","overArg","transform","arg","setToArray","getPrototype","getPrototypeOf","objectCreate","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","nativeKeys","DataView","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolValueOf","valueOf","Stack","arrayLikeKeys","inherited","n","baseTimes","skipIndexes","assignValue","objValue","eq","baseClone","isDeep","isFull","customizer","stack","isArr","input","initCloneArray","copyArray","getTag","buffer","copy","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","cloneSet","symbol","initCloneByTag","stacked","keysFunc","symbolsFunc","baseGetAllKeys","getAllKeys","arrayEach","subValue","arrayBuffer","newValue","pairs","ctorString","baseKeys","sum","GCounter","counters","isEqual","EventIndex","collect","messages","_query","currentIndex","_read","ops","inclusive","startIndex"],"mappings":"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","file":"3.bundle.js","sourcesContent":["const path = require('path')\n\n// Creates a DB manifest file and saves it in IPFS\nconst createDBManifest = async (ipfs, name, type, accessControllerAddress) => {\n  const manifest = {\n    name: name,\n    type: type,\n    accessController: path.join('/ipfs', accessControllerAddress),\n  }\n  const dag = await ipfs.object.put(Buffer.from(JSON.stringify(manifest)))\n  return dag.toJSON().multihash.toString()\n}\n\nmodule.exports = createDBManifest\n","'use strict'\n\nconst path = require('path')\nconst multihash = require('multihashes')\n\nclass OrbitDBAddress {\n  constructor (root, path) {\n    this.root = root\n    this.path = path\n  }\n\n  toString () {\n    return path.join('/orbitdb', this.root, this.path)\n  }\n\n  static isValid (address) {\n    const parts = address.toString()\n      .split('/')\n      .filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb'))\n      .filter(e => e !== '' && e !== ' ')\n\n    const accessControllerHash = parts[0].indexOf('Qm') > -1 ? multihash.fromB58String(parts[0]) : null\n    try {\n      multihash.validate(accessControllerHash)\n    } catch (e) {\n      return false\n    }\n\n    return accessControllerHash !== null\n  }\n\n  static parse (address) {\n    if (!address) \n      throw new Error(`Not a valid OrbitDB address: ${address}`)\n\n    if (!OrbitDBAddress.isValid(address))\n      throw new Error(`Not a valid OrbitDB address: ${address}`)\n\n    const parts = address.toString()\n      .split('/')\n      .filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb'))\n      .filter(e => e !== '' && e !== ' ')\n\n    return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'))\n  }\n}\n\nmodule.exports = OrbitDBAddress\n","'use strict'\n\nclass AccessController {\n  constructor () {\n    this._access = { \n      admin: [], \n      write: [],  \n      read: [], // Not used atm\n    }\n  }\n\n  /* Overridable functions */\n  async load (address) {}\n  async save () {}\n\n  /* Properties */\n  get admin () {\n    return this._access.admin\n  }\n\n  get write () {\n    // Both admins and write keys can write\n    return this._access.write.concat(this._access.admin)\n  }\n\n  // Not used atm\n  get read () {\n    return this._access.read\n  }\n\n  /* Public Methods */\n  add (access, key) {\n    // if(!Object.keys(this._access).includes(access))\n    //   throw new Error(`unknown access level: ${access}`)\n    // if (!this._access[access].includes(key))\n    //   this._access[access].push(key)\n\n    // TODO: uniques only\n    switch (access) {\n      case 'admin':\n        this._access.admin.push(key)\n        break\n      case 'write':\n        this._access.write.push(key)\n        break\n      case 'read':\n        this._access.read.push(key)\n        break\n      default:\n      break\n    }\n  }\n\n  remove (access, key) {\n    const without = (arr, e) => {\n      const reducer = (res, val) => {\n        if (val !== key)\n          res.push(val)\n        return res\n      }\n      return arr.reduce(reducer, [])\n    }\n\n    // if(!Object.keys(this._access).includes(access))\n    //   throw new Error(`unknown access level: ${access}`)\n    // if (this._access[access].includes(key))\n    //   this._access[access] = without(this._access[access], key)\n\n    switch (access) {\n      case 'admin':\n        this._access.admin = without(this._access.admin, key)\n        break\n      case 'write':\n        this._access.write = without(this._access.write, key)\n        break\n      case 'read':\n        this._access.read = without(this._access.read, key)\n        break\n      default:\n      break\n    }    \n  }\n}\n\nmodule.exports = AccessController\n","'use strict'\n\nconst AccessController = require('./access-controller')\n\nclass IPFSAccessController extends AccessController {\n  constructor (ipfs) {\n    super()\n    this._ipfs = ipfs\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0)\n      address = address.split('/')[2]\n\n    try {\n      const dag = await this._ipfs.object.get(address)\n      const obj = JSON.parse(dag.toJSON().data)\n      this._access = obj\n    } catch (e) {\n      console.log(\"ACCESS ERROR:\", e)\n    }\n  }\n\n  async save () {\n    let hash\n    try {\n      const access = JSON.stringify(this._access, null, 2)\n      const dag = await this._ipfs.object.put(new Buffer(access))\n      hash = dag.toJSON().multihash.toString()\n    } catch (e) {\n      console.log(\"ACCESS ERROR:\", e)\n    }\n    return hash\n  }\n}\n\nmodule.exports = IPFSAccessController\n","'use strict'\n\nconst EC = require('elliptic').ec\nconst ec = new EC('secp256k1')\n\nclass Keystore {\n  constructor(storage) {\n    this._storage = storage\n  }\n\n  createKey(id) {\n    const key = ec.genKeyPair()\n    const publicKey = key.getPublic('hex')\n    const privateKey = key.getPrivate('hex')\n    this._storage.setItem(id, JSON.stringify({\n      publicKey: publicKey, \n      privateKey: privateKey \n    }))\n    return key\n  }\n\n  getKey(id) {\n    let key = JSON.parse(this._storage.getItem(id))\n\n    if (!key)\n      return\n\n    const k = ec.keyPair({ \n      pub:  key.publicKey, \n      priv: key.privateKey,\n      privEnc: 'hex',\n      pubEnc: 'hex',\n    })\n\n    return k\n  }\n\n  generateKey() {\n    return Promise.resolve(ec.genKeyPair())\n  }\n\n  exportPublicKey(key) {\n    return Promise.resolve(key.getPublic('hex'))\n  }\n\n  exportPrivateKey(key) {\n    return Promise.resolve(key.getPrivate('hex'))\n  }\n\n  importPublicKey(key) {\n    return Promise.resolve(ec.keyFromPublic(key, 'hex'))\n  }\n\n  importPrivateKey(key) {\n    return Promise.resolve(ec.keyFromPrivate(key, 'hex'))\n  }\n\n  sign(key, data) {\n    const sig = ec.sign(data, key)\n    return Promise.resolve(sig.toDER('hex'))\n  }\n\n  verify(signature, key, data) {\n    let res = false\n    res = ec.verify(data, signature, key)\n    return Promise.resolve(res)\n  }\n}\n\nmodule.exports = (LocalStorage, mkdir) => {\n  return {\n    create: (directory = './keystore') => {\n      // If we're in Node.js, mkdir module is expected to passed\n      // and we need to make sure the directory exists\n      if (mkdir && mkdir.sync) \n        mkdir.sync(directory)\n      // In Node.js, we use the injected LocalStorage module,\n      // in the browser, we use the browser's localStorage\n      const storage = LocalStorage ? new LocalStorage(directory) : localStorage\n      return new Keystore(storage)\n    }\n  }\n}\n","const Keystore = require('./src/keystore')\nmodule.exports = Keystore()\n","'use strict'\n\nconst path = require('path')\n\nconst Logger = require('logplease')\nconst logger = Logger.create('cache', { color: Logger.Colors.Magenta })\nLogger.setLogLevel('ERROR')\n\nlet caches = {}\n\nclass Cache {\n  constructor (storage, directory) {\n    this.path = directory || './orbitdb'\n    this._storage = storage\n    this._store = null\n  }\n\n  // Setup storage backend\n  async open () {\n    logger.debug('open', this.path)\n\n    if (this.store)\n      return Promise.resolve()\n\n    return new Promise((resolve, reject) => {\n      const store = this._storage(this.path)\n      store.open((err) => {\n        if (err) {\n          return reject(err)\n        }\n        this._store = store\n        resolve()\n      })\n    })\n  }\n\n  async close () {\n    logger.debug('close', this.path)\n\n    if (!this._store)\n      return Promise.resolve()\n\n    return new Promise(resolve => {\n      this._store.close((err) => {\n        if (err) {\n          return reject(err)\n        }\n        this._store = null\n        delete caches[this.path]\n        resolve()\n      })\n    })\n  }\n\n  async destroy () {\n    logger.debug('destroy', this.path)\n\n    return new Promise((resolve, reject) => {\n      this._storage.destroy(this.path, (err) => {\n        if (err) {\n          return reject(err)\n        }\n        resolve()\n      })\n    })\n  }\n\n  async get (key) {\n    if (!this._store)\n      await this.open()\n\n    if (this._store.status && this._store.status !== 'open')\n      return Promise.resolve(null)\n\n    return new Promise((resolve, reject) => {\n      this._store.get(key, (err, value) => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1\n            && err.toString().indexOf('NotFound') === -1)\n            return reject(err)\n        }\n        resolve(value ? JSON.parse(value) : null)\n      })\n    })\n  }\n\n  // Set value in the cache and return the new value\n  async set (key, value) {\n    if (!this._store)\n      await this.open()\n\n    if (this._store.status && this._store.status !== 'open')\n      return Promise.resolve()\n\n    return new Promise((resolve, reject) => {\n      this._store.put(key, JSON.stringify(value), (err) => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1\n            && err.toString().indexOf('NotFound') === -1)\n            return reject(err)\n        }\n        resolve()\n      })\n    })\n  }\n\n  // Remove a value and key from the cache\n  async del (key) {\n    if (!this._store)\n      await this.open()\n\n    return new Promise((resolve, reject) => {\n      this._store.del(key, (err) => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1\n            && err.toString().indexOf('NotFound') === -1)\n            return reject(err)\n        }\n        resolve()\n      })\n    })\n  }\n}\n\nmodule.exports = (storage, mkdir) => {\n  return {\n    load: async (directory, dbAddress) => {\n      logger.debug('load, database:', dbAddress.toString())\n\n      const dbPath = path.join(dbAddress.root, dbAddress.path)\n      const dataPath = path.join(directory, dbPath)\n      let cache = caches[dataPath]\n      if (!cache) {\n        if (mkdir && mkdir.sync) \n          mkdir.sync(dataPath)\n        cache = new Cache(storage, dataPath)\n        await cache.open()\n        caches[dataPath] = cache\n      }\n      return cache\n    },\n    close: async () => {\n      logger.debug('close all')\n\n      await Promise.all(Object.values(caches), cache => cache.close())\n      caches = {}\n    },\n  }\n}\n","/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nmodule.exports = function (arr) {\n  if (typeof Buffer._augment === 'function' && Buffer.TYPED_ARRAY_SUPPORT) {\n    // If `Buffer` is from the `buffer` module and this browser supports typed arrays,\n    // then augment it with all the `Buffer` methods.\n    return Buffer._augment(arr)\n  } else {\n    // Otherwise, fallback to creating a `Buffer` with a copy.\n    return new Buffer(arr)\n  }\n}\n","module.exports = hasKeys\n\nfunction hasKeys(source) {\n    return source !== null &&\n        (typeof source === \"object\" ||\n        typeof source === \"function\")\n}\n","var toString = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toString.call(value);\n\tvar isArguments = str === '[object Arguments]';\n\tif (!isArguments) {\n\t\tisArguments = str !== '[object Array]'\n\t\t\t&& value !== null\n\t\t\t&& typeof value === 'object'\n\t\t\t&& typeof value.length === 'number'\n\t\t\t&& value.length >= 0\n\t\t\t&& toString.call(value.callee) === '[object Function]';\n\t}\n\treturn isArguments;\n};\n\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nvar isFunction = function (fn) {\n\tvar isFunc = (typeof fn === 'function' && !(fn instanceof RegExp)) || toString.call(fn) === '[object Function]';\n\tif (!isFunc && typeof window !== 'undefined') {\n\t\tisFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;\n\t}\n\treturn isFunc;\n};\n\nmodule.exports = function forEach(obj, fn) {\n\tif (!isFunction(fn)) {\n\t\tthrow new TypeError('iterator must be a function');\n\t}\n\tvar i, k,\n\t\tisString = typeof obj === 'string',\n\t\tl = obj.length,\n\t\tcontext = arguments.length > 2 ? arguments[2] : null;\n\tif (l === +l) {\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tif (context === null) {\n\t\t\t\tfn(isString ? obj.charAt(i) : obj[i], i, obj);\n\t\t\t} else {\n\t\t\t\tfn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (k in obj) {\n\t\t\tif (hasOwn.call(obj, k)) {\n\t\t\t\tif (context === null) {\n\t\t\t\t\tfn(obj[k], k, obj);\n\t\t\t\t} else {\n\t\t\t\t\tfn.call(context, obj[k], k, obj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n","(function () {\n\t\"use strict\";\n\n\t// modified from https://github.com/kriskowal/es5-shim\n\tvar has = Object.prototype.hasOwnProperty,\n\t\ttoString = Object.prototype.toString,\n\t\tforEach = require('./foreach'),\n\t\tisArgs = require('./isArguments'),\n\t\thasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString'),\n\t\thasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),\n\t\tdontEnums = [\n\t\t\t\"toString\",\n\t\t\t\"toLocaleString\",\n\t\t\t\"valueOf\",\n\t\t\t\"hasOwnProperty\",\n\t\t\t\"isPrototypeOf\",\n\t\t\t\"propertyIsEnumerable\",\n\t\t\t\"constructor\"\n\t\t],\n\t\tkeysShim;\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object',\n\t\t\tisFunction = toString.call(object) === '[object Function]',\n\t\t\tisArguments = isArgs(object),\n\t\t\ttheKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError(\"Object.keys called on a non-object\");\n\t\t}\n\n\t\tif (isArguments) {\n\t\t\tforEach(object, function (value) {\n\t\t\t\ttheKeys.push(value);\n\t\t\t});\n\t\t} else {\n\t\t\tvar name,\n\t\t\t\tskipProto = hasProtoEnumBug && isFunction;\n\n\t\t\tfor (name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar ctor = object.constructor,\n\t\t\t\tskipConstructor = ctor && ctor.prototype === object;\n\n\t\t\tforEach(dontEnums, function (dontEnum) {\n\t\t\t\tif (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {\n\t\t\t\t\ttheKeys.push(dontEnum);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn theKeys;\n\t};\n\n\tmodule.exports = keysShim;\n}());\n\n","module.exports = Object.keys || require('./shim');\n\n","var Keys = require(\"object-keys\")\nvar hasKeys = require(\"./has-keys\")\n\nmodule.exports = extend\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        if (!hasKeys(source)) {\n            continue\n        }\n\n        var keys = Keys(source)\n\n        for (var j = 0; j < keys.length; j++) {\n            var name = keys[j]\n            target[name] = source[name]\n        }\n    }\n\n    return target\n}\n","var Buffer = require('buffer').Buffer;\n\nmodule.exports = isBuffer;\n\nfunction isBuffer (o) {\n  return Buffer.isBuffer(o)\n    || /\\[object (.+Array|Array.+)\\]/.test(Object.prototype.toString.call(o));\n}\n","var util = require('util')\nvar AbstractIterator  = require('abstract-leveldown').AbstractIterator\nvar ltgt = require('ltgt')\n\nmodule.exports = Iterator\n\nfunction Iterator (db, options) {\n  if (!options) options = {}\n  this.options = options\n  AbstractIterator.call(this, db)\n  this._order = options.reverse ? 'DESC': 'ASC'\n  this._limit = options.limit\n  this._count = 0\n  this._done  = false\n  var lower = ltgt.lowerBound(options)\n  var upper = ltgt.upperBound(options)\n  try {\n    this._keyRange = lower || upper ? this.db.makeKeyRange({\n      lower: lower,\n      upper: upper,\n      excludeLower: ltgt.lowerBoundExclusive(options),\n      excludeUpper: ltgt.upperBoundExclusive(options)\n    }) : null\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._keyRangeError = true\n  }\n  this.callback = null\n}\n\nutil.inherits(Iterator, AbstractIterator)\n\nIterator.prototype.createIterator = function() {\n  var self = this\n\n  self.iterator = self.db.iterate(function () {\n    self.onItem.apply(self, arguments)\n  }, {\n    keyRange: self._keyRange,\n    autoContinue: false,\n    order: self._order,\n    onError: function(err) { console.log('horrible error', err) },\n  })\n}\n\n// TODO the limit implementation here just ignores all reads after limit has been reached\n// it should cancel the iterator instead but I don't know how\nIterator.prototype.onItem = function (value, cursor, cursorTransaction) {\n  if (!cursor && this.callback) {\n    this.callback()\n    this.callback = false\n    return\n  }\n  var shouldCall = true\n\n  if (!!this._limit && this._limit > 0 && this._count++ >= this._limit)\n    shouldCall = false\n\n  if (shouldCall) this.callback(false, cursor.key, cursor.value)\n  if (cursor) cursor['continue']()\n}\n\nIterator.prototype._next = function (callback) {\n  if (!callback) return new Error('next() requires a callback argument')\n  if (this._keyRangeError) return callback()\n  if (!this._started) {\n    this.createIterator()\n    this._started = true\n  }\n  this.callback = callback\n}\n","/* Copyright (c) 2013 Rod Vagg, MIT License */\n\nfunction AbstractChainedBatch (db) {\n  this._db         = db\n  this._operations = []\n  this._written    = false\n}\n\nAbstractChainedBatch.prototype._checkWritten = function () {\n  if (this._written)\n    throw new Error('write() already called on this batch')\n}\n\nAbstractChainedBatch.prototype.put = function (key, value) {\n  this._checkWritten()\n\n  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)\n  if (err) throw err\n  err = this._db._checkKeyValue(value, 'value', this._db._isBuffer)\n  if (err) throw err\n\n  if (!this._db._isBuffer(key)) key = String(key)\n  if (!this._db._isBuffer(value)) value = String(value)\n\n  if (typeof this._put == 'function' )\n    this._put(key, value)\n  else\n    this._operations.push({ type: 'put', key: key, value: value })\n\n  return this\n}\n\nAbstractChainedBatch.prototype.del = function (key) {\n  this._checkWritten()\n\n  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)\n  if (err) throw err\n\n  if (!this._db._isBuffer(key)) key = String(key)\n\n  if (typeof this._del == 'function' )\n    this._del(key)\n  else\n    this._operations.push({ type: 'del', key: key })\n\n  return this\n}\n\nAbstractChainedBatch.prototype.clear = function () {\n  this._checkWritten()\n\n  this._operations = []\n\n  if (typeof this._clear == 'function' )\n    this._clear()\n\n  return this\n}\n\nAbstractChainedBatch.prototype.write = function (options, callback) {\n  this._checkWritten()\n\n  if (typeof options == 'function')\n    callback = options\n  if (typeof callback != 'function')\n    throw new Error('write() requires a callback argument')\n  if (typeof options != 'object')\n    options = {}\n\n  this._written = true\n\n  if (typeof this._write == 'function' )\n    return this._write(callback)\n\n  if (typeof this._db._batch == 'function')\n    return this._db._batch(this._operations, options, callback)\n\n  process.nextTick(callback)\n}\n\nmodule.exports = AbstractChainedBatch","/* Copyright (c) 2013 Rod Vagg, MIT License */\n\nfunction AbstractIterator (db) {\n  this.db = db\n  this._ended = false\n  this._nexting = false\n}\n\nAbstractIterator.prototype.next = function (callback) {\n  var self = this\n\n  if (typeof callback != 'function')\n    throw new Error('next() requires a callback argument')\n\n  if (self._ended)\n    return callback(new Error('cannot call next() after end()'))\n  if (self._nexting)\n    return callback(new Error('cannot call next() before previous next() has completed'))\n\n  self._nexting = true\n  if (typeof self._next == 'function') {\n    return self._next(function () {\n      self._nexting = false\n      callback.apply(null, arguments)\n    })\n  }\n\n  process.nextTick(function () {\n    self._nexting = false\n    callback()\n  })\n}\n\nAbstractIterator.prototype.end = function (callback) {\n  if (typeof callback != 'function')\n    throw new Error('end() requires a callback argument')\n\n  if (this._ended)\n    return callback(new Error('end() already called on iterator'))\n\n  this._ended = true\n\n  if (typeof this._end == 'function')\n    return this._end(callback)\n\n  process.nextTick(callback)\n}\n\nmodule.exports = AbstractIterator\n","module.exports = extend\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","/*global window:false, self:false, define:false, module:false */\n\n/**\n * @license IDBWrapper - A cross-browser wrapper for IndexedDB\n * Version 1.7.2\n * Copyright (c) 2011 - 2017 Jens Arps\n * http://jensarps.de/\n *\n * Licensed under the MIT license\n */\n\n(function (name, definition, global) {\n\n    'use strict';\n\n    if (typeof define === 'function') {\n        define(definition);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = definition();\n    } else {\n        global[name] = definition();\n    }\n})('IDBStore', function () {\n\n    'use strict';\n\n    var defaultErrorHandler = function (error) {\n        throw error;\n    };\n    var defaultSuccessHandler = function () {\n    };\n\n    var defaults = {\n        storeName: 'Store',\n        storePrefix: 'IDBWrapper-',\n        dbVersion: 1,\n        keyPath: 'id',\n        autoIncrement: true,\n        onStoreReady: function () {\n        },\n        onError: defaultErrorHandler,\n        indexes: [],\n        implementationPreference: [\n            'indexedDB',\n            'webkitIndexedDB',\n            'mozIndexedDB',\n            'shimIndexedDB'\n        ]\n    };\n\n    /**\n     *\n     * The IDBStore constructor\n     *\n     * @constructor\n     * @name IDBStore\n     * @version 1.7.2\n     *\n     * @param {Object} [kwArgs] An options object used to configure the store and\n     *  set callbacks\n     * @param {String} [kwArgs.storeName='Store'] The name of the store\n     * @param {String} [kwArgs.storePrefix='IDBWrapper-'] A prefix that is\n     *  internally used to construct the name of the database, which will be\n     *  kwArgs.storePrefix + kwArgs.storeName\n     * @param {Number} [kwArgs.dbVersion=1] The version of the store\n     * @param {String} [kwArgs.keyPath='id'] The key path to use. If you want to\n     *  setup IDBWrapper to work with out-of-line keys, you need to set this to\n     *  `null`\n     * @param {Boolean} [kwArgs.autoIncrement=true] If set to true, IDBStore will\n     *  automatically make sure a unique keyPath value is present on each object\n     *  that is stored.\n     * @param {Function} [kwArgs.onStoreReady] A callback to be called when the\n     *  store is ready to be used.\n     * @param {Function} [kwArgs.onError=throw] A callback to be called when an\n     *  error occurred during instantiation of the store.\n     * @param {Array} [kwArgs.indexes=[]] An array of indexData objects\n     *  defining the indexes to use with the store. For every index to be used\n     *  one indexData object needs to be passed in the array.\n     *  An indexData object is defined as follows:\n     * @param {Object} [kwArgs.indexes.indexData] An object defining the index to\n     *  use\n     * @param {String} kwArgs.indexes.indexData.name The name of the index\n     * @param {String} [kwArgs.indexes.indexData.keyPath] The key path of the index\n     * @param {Boolean} [kwArgs.indexes.indexData.unique] Whether the index is unique\n     * @param {Boolean} [kwArgs.indexes.indexData.multiEntry] Whether the index is multi entry\n     * @param {Array} [kwArgs.implementationPreference=['indexedDB','webkitIndexedDB','mozIndexedDB','shimIndexedDB']] An array of strings naming implementations to be used, in order or preference\n     * @param {Function} [onStoreReady] A callback to be called when the store\n     * is ready to be used.\n     * @example\n     // create a store for customers with an additional index over the\n     // `lastname` property.\n     var myCustomerStore = new IDBStore({\n         dbVersion: 1,\n         storeName: 'customer-index',\n         keyPath: 'customerid',\n         autoIncrement: true,\n         onStoreReady: populateTable,\n         indexes: [\n             { name: 'lastname', keyPath: 'lastname', unique: false, multiEntry: false }\n         ]\n     });\n     * @example\n     // create a generic store\n     var myCustomerStore = new IDBStore({\n         storeName: 'my-data-store',\n         onStoreReady: function(){\n             // start working with the store.\n         }\n     });\n     */\n    var IDBStore = function (kwArgs, onStoreReady) {\n\n        if (typeof onStoreReady == 'undefined' && typeof kwArgs == 'function') {\n            onStoreReady = kwArgs;\n        }\n        if (Object.prototype.toString.call(kwArgs) != '[object Object]') {\n            kwArgs = {};\n        }\n\n        for (var key in defaults) {\n            this[key] = typeof kwArgs[key] != 'undefined' ? kwArgs[key] : defaults[key];\n        }\n\n        this.dbName = this.storePrefix + this.storeName;\n        this.dbVersion = parseInt(this.dbVersion, 10) || 1;\n\n        onStoreReady && (this.onStoreReady = onStoreReady);\n\n        var env = typeof window == 'object' ? window : self;\n        var availableImplementations = this.implementationPreference.filter(function (implName) {\n            return implName in env;\n        });\n        this.implementation = availableImplementations[0];\n        this.idb = env[this.implementation];\n        this.keyRange = env.IDBKeyRange || env.webkitIDBKeyRange || env.mozIDBKeyRange;\n\n        this.consts = {\n            'READ_ONLY': 'readonly',\n            'READ_WRITE': 'readwrite',\n            'VERSION_CHANGE': 'versionchange',\n            'NEXT': 'next',\n            'NEXT_NO_DUPLICATE': 'nextunique',\n            'PREV': 'prev',\n            'PREV_NO_DUPLICATE': 'prevunique'\n        };\n\n        this.openDB();\n    };\n\n    /** @lends IDBStore.prototype */\n    var proto = {\n\n        /**\n         * A pointer to the IDBStore ctor\n         *\n         * @private\n         * @type {Function}\n         * @constructs\n         */\n        constructor: IDBStore,\n\n        /**\n         * The version of IDBStore\n         *\n         * @type {String}\n         */\n        version: '1.7.2',\n\n        /**\n         * A reference to the IndexedDB object\n         *\n         * @type {IDBDatabase}\n         */\n        db: null,\n\n        /**\n         * The full name of the IndexedDB used by IDBStore, composed of\n         * this.storePrefix + this.storeName\n         *\n         * @type {String}\n         */\n        dbName: null,\n\n        /**\n         * The version of the IndexedDB used by IDBStore\n         *\n         * @type {Number}\n         */\n        dbVersion: null,\n\n        /**\n         * A reference to the objectStore used by IDBStore\n         *\n         * @type {IDBObjectStore}\n         */\n        store: null,\n\n        /**\n         * The store name\n         *\n         * @type {String}\n         */\n        storeName: null,\n\n        /**\n         * The prefix to prepend to the store name\n         *\n         * @type {String}\n         */\n        storePrefix: null,\n\n        /**\n         * The key path\n         *\n         * @type {String}\n         */\n        keyPath: null,\n\n        /**\n         * Whether IDBStore uses autoIncrement\n         *\n         * @type {Boolean}\n         */\n        autoIncrement: null,\n\n        /**\n         * The indexes used by IDBStore\n         *\n         * @type {Array}\n         */\n        indexes: null,\n\n        /**\n         * The implemantations to try to use, in order of preference\n         *\n         * @type {Array}\n         */\n        implementationPreference: null,\n\n        /**\n         * The actual implementation being used\n         *\n         * @type {String}\n         */\n        implementation: '',\n\n        /**\n         * The callback to be called when the store is ready to be used\n         *\n         * @type {Function}\n         */\n        onStoreReady: null,\n\n        /**\n         * The callback to be called if an error occurred during instantiation\n         * of the store\n         *\n         * @type {Function}\n         */\n        onError: null,\n\n        /**\n         * The internal insertID counter\n         *\n         * @type {Number}\n         * @private\n         */\n        _insertIdCount: 0,\n\n        /**\n         * Opens an IndexedDB; called by the constructor.\n         *\n         * Will check if versions match and compare provided index configuration\n         * with existing ones, and update indexes if necessary.\n         *\n         * Will call this.onStoreReady() if everything went well and the store\n         * is ready to use, and this.onError() is something went wrong.\n         *\n         * @private\n         *\n         */\n        openDB: function () {\n\n            var openRequest = this.idb.open(this.dbName, this.dbVersion);\n            var preventSuccessCallback = false;\n\n            openRequest.onerror = function (errorEvent) {\n\n                if (hasVersionError(errorEvent)) {\n                    this.onError(new Error('The version number provided is lower than the existing one.'));\n                } else {\n                    var error;\n\n                    if (errorEvent.target.error) {\n                        error = errorEvent.target.error;\n                    } else {\n                        var errorMessage = 'IndexedDB unknown error occurred when opening DB ' + this.dbName + ' version ' + this.dbVersion;\n                        if ('errorCode' in errorEvent.target) {\n                            errorMessage += ' with error code ' + errorEvent.target.errorCode;\n                        }\n                        error = new Error(errorMessage);\n                    }\n\n                    this.onError(error);\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (event) {\n\n                if (preventSuccessCallback) {\n                    return;\n                }\n\n                if (this.db) {\n                    this.onStoreReady();\n                    return;\n                }\n\n                this.db = event.target.result;\n\n                if (typeof this.db.version == 'string') {\n                    this.onError(new Error('The IndexedDB implementation in this browser is outdated. Please upgrade your browser.'));\n                    return;\n                }\n\n                if (!this.db.objectStoreNames.contains(this.storeName)) {\n                    // We should never ever get here.\n                    // Lets notify the user anyway.\n                    this.onError(new Error('Object store couldn\\'t be created.'));\n                    return;\n                }\n\n                var emptyTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n                this.store = emptyTransaction.objectStore(this.storeName);\n\n                // check indexes\n                var existingIndexes = Array.prototype.slice.call(this.getIndexList());\n                this.indexes.forEach(function (indexData) {\n                    var indexName = indexData.name;\n\n                    if (!indexName) {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create index: No index name given.'));\n                        return;\n                    }\n\n                    this.normalizeIndexData(indexData);\n\n                    if (this.hasIndex(indexName)) {\n                        // check if it complies\n                        var actualIndex = this.store.index(indexName);\n                        var complies = this.indexComplies(actualIndex, indexData);\n                        if (!complies) {\n                            preventSuccessCallback = true;\n                            this.onError(new Error('Cannot modify index \"' + indexName + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                        }\n\n                        existingIndexes.splice(existingIndexes.indexOf(indexName), 1);\n                    } else {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create new index \"' + indexName + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                    }\n\n                }, this);\n\n                if (existingIndexes.length) {\n                    preventSuccessCallback = true;\n                    this.onError(new Error('Cannot delete index(es) \"' + existingIndexes.toString() + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                }\n\n                preventSuccessCallback || this.onStoreReady();\n            }.bind(this);\n\n            openRequest.onupgradeneeded = function (/* IDBVersionChangeEvent */ event) {\n\n                this.db = event.target.result;\n\n                if (this.db.objectStoreNames.contains(this.storeName)) {\n                    this.store = event.target.transaction.objectStore(this.storeName);\n                } else {\n                    var optionalParameters = {autoIncrement: this.autoIncrement};\n                    if (this.keyPath !== null) {\n                        optionalParameters.keyPath = this.keyPath;\n                    }\n                    this.store = this.db.createObjectStore(this.storeName, optionalParameters);\n                }\n\n                var existingIndexes = Array.prototype.slice.call(this.getIndexList());\n                this.indexes.forEach(function (indexData) {\n                    var indexName = indexData.name;\n\n                    if (!indexName) {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create index: No index name given.'));\n                    }\n\n                    this.normalizeIndexData(indexData);\n\n                    if (this.hasIndex(indexName)) {\n                        // check if it complies\n                        var actualIndex = this.store.index(indexName);\n                        var complies = this.indexComplies(actualIndex, indexData);\n                        if (!complies) {\n                            // index differs, need to delete and re-create\n                            this.store.deleteIndex(indexName);\n                            this.store.createIndex(indexName, indexData.keyPath, {\n                                unique: indexData.unique,\n                                multiEntry: indexData.multiEntry\n                            });\n                        }\n\n                        existingIndexes.splice(existingIndexes.indexOf(indexName), 1);\n                    } else {\n                        this.store.createIndex(indexName, indexData.keyPath, {\n                            unique: indexData.unique,\n                            multiEntry: indexData.multiEntry\n                        });\n                    }\n\n                }, this);\n\n                if (existingIndexes.length) {\n                    existingIndexes.forEach(function (_indexName) {\n                        this.store.deleteIndex(_indexName);\n                    }, this);\n                }\n\n            }.bind(this);\n        },\n\n        /**\n         * Deletes the database used for this store if the IDB implementations\n         * provides that functionality.\n         *\n         * @param {Function} [onSuccess] A callback that is called if deletion\n         *  was successful.\n         * @param {Function} [onError] A callback that is called if deletion\n         *  failed.\n         */\n        deleteDatabase: function (onSuccess, onError) {\n            if (this.idb.deleteDatabase) {\n                this.db.close();\n                var deleteRequest = this.idb.deleteDatabase(this.dbName);\n                deleteRequest.onsuccess = onSuccess;\n                deleteRequest.onerror = onError;\n            } else {\n                onError(new Error('Browser does not support IndexedDB deleteDatabase!'));\n            }\n        },\n\n        /*********************\n         * data manipulation *\n         *********************/\n\n        /**\n         * Puts an object into the store. If an entry with the given id exists,\n         * it will be overwritten. This method has a different signature for inline\n         * keys and out-of-line keys; please see the examples below.\n         *\n         * @param {*} [key] The key to store. This is only needed if IDBWrapper\n         *  is set to use out-of-line keys. For inline keys - the default scenario -\n         *  this can be omitted.\n         * @param {Object} value The data object to store.\n         * @param {Function} [onSuccess] A callback that is called if insertion\n         *  was successful.\n         * @param {Function} [onError] A callback that is called if insertion\n         *  failed.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         * @example\n         // Storing an object, using inline keys (the default scenario):\n         var myCustomer = {\n             customerid: 2346223,\n             lastname: 'Doe',\n             firstname: 'John'\n         };\n         myCustomerStore.put(myCustomer, mySuccessHandler, myErrorHandler);\n         // Note that passing success- and error-handlers is optional.\n         * @example\n         // Storing an object, using out-of-line keys:\n         var myCustomer = {\n             lastname: 'Doe',\n             firstname: 'John'\n         };\n         myCustomerStore.put(2346223, myCustomer, mySuccessHandler, myErrorHandler);\n         // Note that passing success- and error-handlers is optional.\n         */\n        put: function (key, value, onSuccess, onError) {\n            if (this.keyPath !== null) {\n                onError = onSuccess;\n                onSuccess = value;\n                value = key;\n            }\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null,\n                putRequest;\n\n            var putTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            putTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            putTransaction.onabort = onError;\n            putTransaction.onerror = onError;\n\n            if (this.keyPath !== null) { // in-line keys\n                this._addIdPropertyIfNeeded(value);\n                putRequest = putTransaction.objectStore(this.storeName).put(value);\n            } else { // out-of-line keys\n                putRequest = putTransaction.objectStore(this.storeName).put(value, key);\n            }\n            putRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            putRequest.onerror = onError;\n\n            return putTransaction;\n        },\n\n        /**\n         * Retrieves an object from the store. If no entry exists with the given id,\n         * the success handler will be called with null as first and only argument.\n         *\n         * @param {*} key The id of the object to fetch.\n         * @param {Function} [onSuccess] A callback that is called if fetching\n         *  was successful. Will receive the object as only argument.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        get: function (key, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var getTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            getTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getTransaction.onabort = onError;\n            getTransaction.onerror = onError;\n            var getRequest = getTransaction.objectStore(this.storeName).get(key);\n            getRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            getRequest.onerror = onError;\n\n            return getTransaction;\n        },\n\n        /**\n         * Removes an object from the store.\n         *\n         * @param {*} key The id of the object to remove.\n         * @param {Function} [onSuccess] A callback that is called if the removal\n         *  was successful.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        remove: function (key, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var removeTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            removeTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            removeTransaction.onabort = onError;\n            removeTransaction.onerror = onError;\n\n            var deleteRequest = removeTransaction.objectStore(this.storeName)['delete'](key);\n            deleteRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            deleteRequest.onerror = onError;\n\n            return removeTransaction;\n        },\n\n        /**\n         * Runs a batch of put and/or remove operations on the store.\n         *\n         * @param {Array} dataArray An array of objects containing the operation to run\n         *  and the data object (for put operations).\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        batch: function (dataArray, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            if (Object.prototype.toString.call(dataArray) != '[object Array]') {\n                onError(new Error('dataArray argument must be of type Array.'));\n            } else if (dataArray.length === 0) {\n                return onSuccess(true);\n            }\n\n            var count = dataArray.length;\n            var called = false;\n            var hasSuccess = false;\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            batchTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(hasSuccess);\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n\n            var onItemSuccess = function () {\n                count--;\n                if (count === 0 && !called) {\n                    called = true;\n                    hasSuccess = true;\n                }\n            };\n\n            dataArray.forEach(function (operation) {\n                var type = operation.type;\n                var key = operation.key;\n                var value = operation.value;\n\n                var onItemError = function (err) {\n                    batchTransaction.abort();\n                    if (!called) {\n                        called = true;\n                        onError(err, type, key);\n                    }\n                };\n\n                if (type == 'remove') {\n                    var deleteRequest = batchTransaction.objectStore(this.storeName)['delete'](key);\n                    deleteRequest.onsuccess = onItemSuccess;\n                    deleteRequest.onerror = onItemError;\n                } else if (type == 'put') {\n                    var putRequest;\n                    if (this.keyPath !== null) { // in-line keys\n                        this._addIdPropertyIfNeeded(value);\n                        putRequest = batchTransaction.objectStore(this.storeName).put(value);\n                    } else { // out-of-line keys\n                        putRequest = batchTransaction.objectStore(this.storeName).put(value, key);\n                    }\n                    putRequest.onsuccess = onItemSuccess;\n                    putRequest.onerror = onItemError;\n                }\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Takes an array of objects and stores them in a single transaction.\n         *\n         * @param {Array} dataArray An array of objects to store\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        putBatch: function (dataArray, onSuccess, onError) {\n            var batchData = dataArray.map(function (item) {\n                return {type: 'put', value: item};\n            });\n\n            return this.batch(batchData, onSuccess, onError);\n        },\n\n        /**\n         * Like putBatch, takes an array of objects and stores them in a single\n         * transaction, but allows processing of the result values.  Returns the\n         * processed records containing the key for newly created records to the\n         * onSuccess calllback instead of only returning true or false for success.\n         * In addition, added the option for the caller to specify a key field that\n         * should be set to the newly created key.\n         *\n         * @param {Array} dataArray An array of objects to store\n         * @param {Object} [options] An object containing optional options\n         * @param {String} [options.keyField=this.keyPath] Specifies a field in the record to update\n         *  with the auto-incrementing key. Defaults to the store's keyPath.\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         *\n         */\n        upsertBatch: function (dataArray, options, onSuccess, onError) {\n            // handle `dataArray, onSuccess, onError` signature\n            if (typeof options == 'function') {\n                onSuccess = options;\n                onError = onSuccess;\n                options = {};\n            }\n\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            options || (options = {});\n\n            if (Object.prototype.toString.call(dataArray) != '[object Array]') {\n                onError(new Error('dataArray argument must be of type Array.'));\n            }\n\n            var keyField = options.keyField || this.keyPath;\n            var count = dataArray.length;\n            var called = false;\n            var hasSuccess = false;\n            var index = 0; // assume success callbacks are executed in order\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            batchTransaction.oncomplete = function () {\n                if (hasSuccess) {\n                    onSuccess(dataArray);\n                } else {\n                    onError(false);\n                }\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n            var onItemSuccess = function (event) {\n                var record = dataArray[index++];\n                record[keyField] = event.target.result;\n\n                count--;\n                if (count === 0 && !called) {\n                    called = true;\n                    hasSuccess = true;\n                }\n            };\n\n            dataArray.forEach(function (record) {\n                var key = record.key;\n\n                var onItemError = function (err) {\n                    batchTransaction.abort();\n                    if (!called) {\n                        called = true;\n                        onError(err);\n                    }\n                };\n\n                var putRequest;\n                if (this.keyPath !== null) { // in-line keys\n                    this._addIdPropertyIfNeeded(record);\n                    putRequest = batchTransaction.objectStore(this.storeName).put(record);\n                } else { // out-of-line keys\n                    putRequest = batchTransaction.objectStore(this.storeName).put(record, key);\n                }\n                putRequest.onsuccess = onItemSuccess;\n                putRequest.onerror = onItemError;\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Takes an array of keys and removes matching objects in a single\n         * transaction.\n         *\n         * @param {Array} keyArray An array of keys to remove\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        removeBatch: function (keyArray, onSuccess, onError) {\n            var batchData = keyArray.map(function (key) {\n                return {type: 'remove', key: key};\n            });\n\n            return this.batch(batchData, onSuccess, onError);\n        },\n\n        /**\n         * Takes an array of keys and fetches matching objects\n         *\n         * @param {Array} keyArray An array of keys identifying the objects to fetch\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @param {String} [arrayType='sparse'] The type of array to pass to the\n         *  success handler. May be one of 'sparse', 'dense' or 'skip'. Defaults to\n         *  'sparse'. This parameter specifies how to handle the situation if a get\n         *  operation did not throw an error, but there was no matching object in\n         *  the database. In most cases, 'sparse' provides the most desired\n         *  behavior. See the examples for details.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         * @example\n         // given that there are two objects in the database with the keypath\n         // values 1 and 2, and the call looks like this:\n         myStore.getBatch([1, 5, 2], onError, function (data) { … }, arrayType);\n\n         // this is what the `data` array will be like:\n\n         // arrayType == 'sparse':\n         // data is a sparse array containing two entries and having a length of 3:\n         [Object, 2: Object]\n         0: Object\n         2: Object\n         length: 3\n         // calling forEach on data will result in the callback being called two\n         // times, with the index parameter matching the index of the key in the\n         // keyArray.\n\n         // arrayType == 'dense':\n         // data is a dense array containing three entries and having a length of 3,\n         // where data[1] is of type undefined:\n         [Object, undefined, Object]\n         0: Object\n         1: undefined\n         2: Object\n         length: 3\n         // calling forEach on data will result in the callback being called three\n         // times, with the index parameter matching the index of the key in the\n         // keyArray, but the second call will have undefined as first argument.\n\n         // arrayType == 'skip':\n         // data is a dense array containing two entries and having a length of 2:\n         [Object, Object]\n         0: Object\n         1: Object\n         length: 2\n         // calling forEach on data will result in the callback being called two\n         // times, with the index parameter not matching the index of the key in the\n         // keyArray.\n         */\n        getBatch: function (keyArray, onSuccess, onError, arrayType) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            arrayType || (arrayType = 'sparse');\n\n            if (Object.prototype.toString.call(keyArray) != '[object Array]') {\n                onError(new Error('keyArray argument must be of type Array.'));\n            } else if (keyArray.length === 0) {\n                return onSuccess([]);\n            }\n\n            var data = [];\n            var count = keyArray.length;\n            var called = false;\n            var hasSuccess = false;\n            var result = null;\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            batchTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n            var onItemSuccess = function (event) {\n                if (event.target.result || arrayType == 'dense') {\n                    data.push(event.target.result);\n                } else if (arrayType == 'sparse') {\n                    data.length++;\n                }\n                count--;\n                if (count === 0) {\n                    called = true;\n                    hasSuccess = true;\n                    result = data;\n                }\n            };\n\n            keyArray.forEach(function (key) {\n\n                var onItemError = function (err) {\n                    called = true;\n                    result = err;\n                    onError(err);\n                    batchTransaction.abort();\n                };\n\n                var getRequest = batchTransaction.objectStore(this.storeName).get(key);\n                getRequest.onsuccess = onItemSuccess;\n                getRequest.onerror = onItemError;\n\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Fetches all entries in the store.\n         *\n         * @param {Function} [onSuccess] A callback that is called if the operation\n         *  was successful. Will receive an array of objects.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        getAll: function (onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            var getAllTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            var store = getAllTransaction.objectStore(this.storeName);\n            if (store.getAll) {\n                this._getAllNative(getAllTransaction, store, onSuccess, onError);\n            } else {\n                this._getAllCursor(getAllTransaction, store, onSuccess, onError);\n            }\n\n            return getAllTransaction;\n        },\n\n        /**\n         * Implements getAll for IDB implementations that have a non-standard\n         * getAll() method.\n         *\n         * @param {IDBTransaction} getAllTransaction An open READ transaction.\n         * @param {IDBObjectStore} store A reference to the store.\n         * @param {Function} onSuccess A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} onError A callback that will be called if an\n         *  error occurred during the operation.\n         * @private\n         */\n        _getAllNative: function (getAllTransaction, store, onSuccess, onError) {\n            var hasSuccess = false,\n                result = null;\n\n            getAllTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getAllTransaction.onabort = onError;\n            getAllTransaction.onerror = onError;\n\n            var getAllRequest = store.getAll();\n            getAllRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            getAllRequest.onerror = onError;\n        },\n\n        /**\n         * Implements getAll for IDB implementations that do not have a getAll()\n         * method.\n         *\n         * @param {IDBTransaction} getAllTransaction An open READ transaction.\n         * @param {IDBObjectStore} store A reference to the store.\n         * @param {Function} onSuccess A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} onError A callback that will be called if an\n         *  error occurred during the operation.\n         * @private\n         */\n        _getAllCursor: function (getAllTransaction, store, onSuccess, onError) {\n            var all = [],\n                hasSuccess = false,\n                result = null;\n\n            getAllTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getAllTransaction.onabort = onError;\n            getAllTransaction.onerror = onError;\n\n            var cursorRequest = store.openCursor();\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    all.push(cursor.value);\n                    cursor['continue']();\n                }\n                else {\n                    hasSuccess = true;\n                    result = all;\n                }\n            };\n            cursorRequest.onError = onError;\n        },\n\n        /**\n         * Clears the store, i.e. deletes all entries in the store.\n         *\n         * @param {Function} [onSuccess] A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} [onError] A callback that will be called if an\n         *  error occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        clear: function (onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var clearTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            clearTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            clearTransaction.onabort = onError;\n            clearTransaction.onerror = onError;\n\n            var clearRequest = clearTransaction.objectStore(this.storeName).clear();\n            clearRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            clearRequest.onerror = onError;\n\n            return clearTransaction;\n        },\n\n        /**\n         * Checks if an id property needs to present on a object and adds one if\n         * necessary.\n         *\n         * @param {Object} dataObj The data object that is about to be stored\n         * @private\n         */\n        _addIdPropertyIfNeeded: function (dataObj) {\n            if (typeof dataObj[this.keyPath] == 'undefined') {\n                dataObj[this.keyPath] = this._insertIdCount++ + Date.now();\n            }\n        },\n\n        /************\n         * indexing *\n         ************/\n\n        /**\n         * Returns a DOMStringList of index names of the store.\n         *\n         * @return {DOMStringList} The list of index names\n         */\n        getIndexList: function () {\n            return this.store.indexNames;\n        },\n\n        /**\n         * Checks if an index with the given name exists in the store.\n         *\n         * @param {String} indexName The name of the index to look for\n         * @return {Boolean} Whether the store contains an index with the given name\n         */\n        hasIndex: function (indexName) {\n            return this.store.indexNames.contains(indexName);\n        },\n\n        /**\n         * Normalizes an object containing index data and assures that all\n         * properties are set.\n         *\n         * @param {Object} indexData The index data object to normalize\n         * @param {String} indexData.name The name of the index\n         * @param {String} [indexData.keyPath] The key path of the index\n         * @param {Boolean} [indexData.unique] Whether the index is unique\n         * @param {Boolean} [indexData.multiEntry] Whether the index is multi entry\n         */\n        normalizeIndexData: function (indexData) {\n            indexData.keyPath = indexData.keyPath || indexData.name;\n            indexData.unique = !!indexData.unique;\n            indexData.multiEntry = !!indexData.multiEntry;\n        },\n\n        /**\n         * Checks if an actual index complies with an expected index.\n         *\n         * @param {IDBIndex} actual The actual index found in the store\n         * @param {Object} expected An Object describing an expected index\n         * @return {Boolean} Whether both index definitions are identical\n         */\n        indexComplies: function (actual, expected) {\n            var complies = ['keyPath', 'unique', 'multiEntry'].every(function (key) {\n                // IE10 returns undefined for no multiEntry\n                if (key == 'multiEntry' && actual[key] === undefined && expected[key] === false) {\n                    return true;\n                }\n                // Compound keys\n                if (key == 'keyPath' && Object.prototype.toString.call(expected[key]) == '[object Array]') {\n                    var exp = expected.keyPath;\n                    var act = actual.keyPath;\n\n                    // IE10 can't handle keyPath sequences and stores them as a string.\n                    // The index will be unusable there, but let's still return true if\n                    // the keyPath sequence matches.\n                    if (typeof act == 'string') {\n                        return exp.toString() == act;\n                    }\n\n                    // Chrome/Opera stores keyPath squences as DOMStringList, Firefox\n                    // as Array\n                    if (!(typeof act.contains == 'function' || typeof act.indexOf == 'function')) {\n                        return false;\n                    }\n\n                    if (act.length !== exp.length) {\n                        return false;\n                    }\n\n                    for (var i = 0, m = exp.length; i < m; i++) {\n                        if (!( (act.contains && act.contains(exp[i])) || act.indexOf(exp[i] !== -1) )) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                return expected[key] == actual[key];\n            });\n            return complies;\n        },\n\n        /**********\n         * cursor *\n         **********/\n\n        /**\n         * Iterates over the store using the given options and calling onItem\n         * for each entry matching the options.\n         *\n         * @param {Function} onItem A callback to be called for each match\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {String} [options.order=ASC] The order in which to provide the\n         *  results, can be 'DESC' or 'ASC'\n         * @param {Boolean} [options.autoContinue=true] Whether to automatically\n         *  iterate the cursor to the next result\n         * @param {Boolean} [options.filterDuplicates=false] Whether to exclude\n         *  duplicate matches\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Boolean} [options.writeAccess=false] Whether grant write access\n         *  to the store in the onItem callback\n         * @param {Function} [options.onEnd=null] A callback to be called after\n         *  iteration has ended\n         * @param {Function} [options.onError=throw] A callback to be called\n         *  if an error occurred during the operation.\n         * @param {Number} [options.limit=Infinity] Limit the number of returned\n         *  results to this number\n         * @param {Number} [options.offset=0] Skip the provided number of results\n         *  in the resultset\n         * @param {Boolean} [options.allowItemRejection=false] Allows the onItem\n         * function to return a Boolean to accept or reject the current item\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        iterate: function (onItem, options) {\n            options = mixin({\n                index: null,\n                order: 'ASC',\n                autoContinue: true,\n                filterDuplicates: false,\n                keyRange: null,\n                writeAccess: false,\n                onEnd: null,\n                onError: defaultErrorHandler,\n                limit: Infinity,\n                offset: 0,\n                allowItemRejection: false\n            }, options || {});\n\n            var directionType = options.order.toLowerCase() == 'desc' ? 'PREV' : 'NEXT';\n            if (options.filterDuplicates) {\n                directionType += '_NO_DUPLICATE';\n            }\n\n            var hasSuccess = false;\n            var cursorTransaction = this.db.transaction([this.storeName], this.consts[options.writeAccess ? 'READ_WRITE' : 'READ_ONLY']);\n            var cursorTarget = cursorTransaction.objectStore(this.storeName);\n            if (options.index) {\n                cursorTarget = cursorTarget.index(options.index);\n            }\n            var recordCount = 0;\n\n            cursorTransaction.oncomplete = function () {\n                if (!hasSuccess) {\n                    options.onError(null);\n                    return;\n                }\n                if (options.onEnd) {\n                    options.onEnd();\n                } else {\n                    onItem(null);\n                }\n            };\n            cursorTransaction.onabort = options.onError;\n            cursorTransaction.onerror = options.onError;\n\n            var cursorRequest = cursorTarget.openCursor(options.keyRange, this.consts[directionType]);\n            cursorRequest.onerror = options.onError;\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if (options.offset) {\n                        cursor.advance(options.offset);\n                        options.offset = 0;\n                    } else {\n                        var onItemReturn = onItem(cursor.value, cursor, cursorTransaction);\n                        if (!options.allowItemRejection || onItemReturn !== false) {\n                            recordCount++;\n                        }\n                        if (options.autoContinue) {\n                            if (recordCount + options.offset < options.limit) {\n                                cursor['continue']();\n                            } else {\n                                hasSuccess = true;\n                            }\n                        }\n                    }\n                } else {\n                    hasSuccess = true;\n                }\n            };\n\n            return cursorTransaction;\n        },\n\n        /**\n         * Runs a query against the store and passes an array containing matched\n         * objects to the success handler.\n         *\n         * @param {Function} onSuccess A callback to be called when the operation\n         *  was successful.\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {String} [options.order=ASC] The order in which to provide the\n         *  results, can be 'DESC' or 'ASC'\n         * @param {Boolean} [options.filterDuplicates=false] Whether to exclude\n         *  duplicate matches\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Function} [options.onError=throw] A callback to be called\n         *  if an error occurred during the operation.\n         * @param {Number} [options.limit=Infinity] Limit the number of returned\n         *  results to this number\n         * @param {Number} [options.offset=0] Skip the provided number of results\n         *  in the resultset\n         * @param {Function} [options.filter=null] A custom filter function to\n         *  apply to query resuts before returning. Must return `false` to reject\n         *  an item. Can be combined with keyRanges.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        query: function (onSuccess, options) {\n            var result = [],\n                processedItems = 0;\n            options = options || {};\n            options.autoContinue = true;\n            options.writeAccess = false;\n            options.allowItemRejection = !!options.filter;\n            options.onEnd = function () {\n                onSuccess(result, processedItems);\n            };\n            return this.iterate(function (item) {\n                processedItems++;\n                var accept = options.filter ? options.filter(item) : true;\n                if (accept !== false) {\n                    result.push(item);\n                }\n                return accept;\n            }, options);\n        },\n\n        /**\n         *\n         * Runs a query against the store, but only returns the number of matches\n         * instead of the matches itself.\n         *\n         * @param {Function} onSuccess A callback to be called if the opration\n         *  was successful.\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Function} [options.onError=throw] A callback to be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        count: function (onSuccess, options) {\n\n            options = mixin({\n                index: null,\n                keyRange: null\n            }, options || {});\n\n            var onError = options.onError || defaultErrorHandler;\n\n            var hasSuccess = false,\n                result = null;\n\n            var cursorTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            cursorTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            cursorTransaction.onabort = onError;\n            cursorTransaction.onerror = onError;\n\n            var cursorTarget = cursorTransaction.objectStore(this.storeName);\n            if (options.index) {\n                cursorTarget = cursorTarget.index(options.index);\n            }\n            var countRequest = cursorTarget.count(options.keyRange);\n            countRequest.onsuccess = function (evt) {\n                hasSuccess = true;\n                result = evt.target.result;\n            };\n            countRequest.onError = onError;\n\n            return cursorTransaction;\n        },\n\n        /**************/\n        /* key ranges */\n        /**************/\n\n        /**\n         * Creates a key range using specified options. This key range can be\n         * handed over to the count() and iterate() methods.\n         *\n         * Note: You must provide at least one or both of \"lower\" or \"upper\" value.\n         *\n         * @param {Object} options The options for the key range to create\n         * @param {*} [options.lower] The lower bound\n         * @param {Boolean} [options.excludeLower] Whether to exclude the lower\n         *  bound passed in options.lower from the key range\n         * @param {*} [options.upper] The upper bound\n         * @param {Boolean} [options.excludeUpper] Whether to exclude the upper\n         *  bound passed in options.upper from the key range\n         * @param {*} [options.only] A single key value. Use this if you need a key\n         *  range that only includes one value for a key. Providing this\n         *  property invalidates all other properties.\n         * @return {IDBKeyRange} The IDBKeyRange representing the specified options\n         */\n        makeKeyRange: function (options) {\n            /*jshint onecase:true */\n            var keyRange,\n                hasLower = typeof options.lower != 'undefined',\n                hasUpper = typeof options.upper != 'undefined',\n                isOnly = typeof options.only != 'undefined';\n\n            switch (true) {\n                case isOnly:\n                    keyRange = this.keyRange.only(options.only);\n                    break;\n                case hasLower && hasUpper:\n                    keyRange = this.keyRange.bound(options.lower, options.upper, options.excludeLower, options.excludeUpper);\n                    break;\n                case hasLower:\n                    keyRange = this.keyRange.lowerBound(options.lower, options.excludeLower);\n                    break;\n                case hasUpper:\n                    keyRange = this.keyRange.upperBound(options.upper, options.excludeUpper);\n                    break;\n                default:\n                    throw new Error('Cannot create KeyRange. Provide one or both of \"lower\" or \"upper\" value, or an \"only\" value.');\n            }\n\n            return keyRange;\n\n        }\n\n    };\n\n    /** helpers **/\n    var empty = {};\n\n    function mixin (target, source) {\n        var name, s;\n        for (name in source) {\n            s = source[name];\n            if (s !== empty[name] && s !== target[name]) {\n                target[name] = s;\n            }\n        }\n        return target;\n    }\n\n    function hasVersionError(errorEvent) {\n        if ('error' in errorEvent.target) {\n            return errorEvent.target.error.name == 'VersionError';\n        } else if ('errorCode' in errorEvent.target) {\n            return errorEvent.target.errorCode == 12;\n        }\n        return false;\n    }\n\n    IDBStore.prototype = proto;\n    IDBStore.version = proto.version;\n\n    return IDBStore;\n\n}, this);\n","module.exports = Level\n\nvar IDB = require('idb-wrapper')\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN\nvar util = require('util')\nvar Iterator = require('./iterator')\nvar isBuffer = require('isbuffer')\nvar xtend = require('xtend')\nvar toBuffer = require('typedarray-to-buffer')\n\nfunction Level(location) {\n  if (!(this instanceof Level)) return new Level(location)\n  if (!location) throw new Error(\"constructor requires at least a location argument\")\n  this.IDBOptions = {}\n  this.location = location\n}\n\nutil.inherits(Level, AbstractLevelDOWN)\n\nLevel.prototype._open = function(options, callback) {\n  var self = this\n    \n  var idbOpts = {\n    storeName: this.location,\n    autoIncrement: false,\n    keyPath: null,\n    onStoreReady: function () {\n      callback && callback(null, self.idb)\n    }, \n    onError: function(err) {\n      callback && callback(err)\n    }\n  }\n  \n  xtend(idbOpts, options)\n  this.IDBOptions = idbOpts\n  this.idb = new IDB(idbOpts)\n}\n\nLevel.prototype._get = function (key, options, callback) {\n  this.idb.get(key, function (value) {\n    if (value === undefined) {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return callback(new Error('NotFound'))\n    }\n    // by default return buffers, unless explicitly told not to\n    var asBuffer = true\n    if (options.asBuffer === false) asBuffer = false\n    if (options.raw) asBuffer = false\n    if (asBuffer) {\n      if (value instanceof Uint8Array) value = toBuffer(value)\n      else value = new Buffer(String(value))\n    }\n    return callback(null, value, key)\n  }, callback)\n}\n\nLevel.prototype._del = function(id, options, callback) {\n  this.idb.remove(id, callback, callback)\n}\n\nLevel.prototype._put = function (key, value, options, callback) {\n  if (value instanceof ArrayBuffer) {\n    value = toBuffer(new Uint8Array(value))\n  }\n  var obj = this.convertEncoding(key, value, options)\n  if (Buffer.isBuffer(obj.value)) {\n    if (typeof value.toArrayBuffer === 'function') {\n      obj.value = new Uint8Array(value.toArrayBuffer())\n    } else {\n      obj.value = new Uint8Array(value)\n    }\n  }\n  this.idb.put(obj.key, obj.value, function() { callback() }, callback)\n}\n\nLevel.prototype.convertEncoding = function(key, value, options) {\n  if (options.raw) return {key: key, value: value}\n  if (value) {\n    var stringed = value.toString()\n    if (stringed === 'NaN') value = 'NaN'\n  }\n  var valEnc = options.valueEncoding\n  var obj = {key: key, value: value}\n  if (value && (!valEnc || valEnc !== 'binary')) {\n    if (typeof obj.value !== 'object') {\n      obj.value = stringed\n    }\n  }\n  return obj\n}\n\nLevel.prototype.iterator = function (options) {\n  if (typeof options !== 'object') options = {}\n  return new Iterator(this.idb, options)\n}\n\nLevel.prototype._batch = function (array, options, callback) {\n  var op\n  var i\n  var k\n  var copiedOp\n  var currentOp\n  var modified = []\n  \n  if (array.length === 0) return setTimeout(callback, 0)\n  \n  for (i = 0; i < array.length; i++) {\n    copiedOp = {}\n    currentOp = array[i]\n    modified[i] = copiedOp\n    \n    var converted = this.convertEncoding(currentOp.key, currentOp.value, options)\n    currentOp.key = converted.key\n    currentOp.value = converted.value\n\n    for (k in currentOp) {\n      if (k === 'type' && currentOp[k] == 'del') {\n        copiedOp[k] = 'remove'\n      } else {\n        copiedOp[k] = currentOp[k]\n      }\n    }\n  }\n\n  return this.idb.batch(modified, function(){ callback() }, callback)\n}\n\nLevel.prototype._close = function (callback) {\n  this.idb.db.close()\n  callback()\n}\n\nLevel.prototype._approximateSize = function (start, end, callback) {\n  var err = new Error('Not implemented')\n  if (callback)\n    return callback(err)\n\n  throw err\n}\n\nLevel.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj)\n}\n\nLevel.destroy = function (db, callback) {\n  if (typeof db === 'object') {\n    var prefix = db.IDBOptions.storePrefix || 'IDBWrapper-'\n    var dbname = db.location\n  } else {\n    var prefix = 'IDBWrapper-'\n    var dbname = db\n  }\n  var request = indexedDB.deleteDatabase(prefix + dbname)\n  request.onsuccess = function() {\n    callback()\n  }\n  request.onerror = function(err) {\n    callback(err)\n  }\n}\n\nvar checkKeyValue = Level.prototype._checkKeyValue = function (obj, type) {\n  if (obj === null || obj === undefined)\n    return new Error(type + ' cannot be `null` or `undefined`')\n  if (obj === null || obj === undefined)\n    return new Error(type + ' cannot be `null` or `undefined`')\n  if (isBuffer(obj) && obj.byteLength === 0)\n    return new Error(type + ' cannot be an empty ArrayBuffer')\n  if (String(obj) === '')\n    return new Error(type + ' cannot be an empty String')\n  if (obj.length === 0)\n    return new Error(type + ' cannot be an empty Array')\n}\n","const level = require('level-js')\nconst Cache = require('./Cache')\nmodule.exports = Cache(level)\n","'use strict'\n\nconst pull = require('pull-stream')\nconst Buffer = require('safe-buffer').Buffer\nconst EventEmitter = require('events')\n\nconst emitter = new EventEmitter()\n\nfunction handler (protocol, conn) {\n  conn.getPeerInfo((err, peerInfo) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n\n    const peerId = peerInfo.id.toB58String()\n\n    pull(\n      conn,\n      pull.map((message) => {\n        let msg\n        try {\n          msg = JSON.parse(message.toString())\n        } catch (err) {\n          emitter.emit('warning', err.message)\n          return // early\n        }\n\n        if (peerId !== msg.from) {\n          emitter.emit('warning', 'no peerid match ' + msg.from)\n          return // early\n        }\n\n        const topicIDs = msg.topicIDs\n        if (!Array.isArray(topicIDs)) {\n          emitter.emit('warning', 'no topic IDs')\n          return // early\n        }\n\n        msg.data = Buffer.from(msg.data, 'hex')\n        msg.seqno = Buffer.from(msg.seqno, 'hex')\n\n        topicIDs.forEach((topic) => {\n          emitter.emit(topic, msg)\n        })\n\n        return msg\n      }),\n      pull.onEnd(() => {\n        // do nothing\n      })\n    )\n  })\n}\n\nexports = module.exports = {\n  handler: handler,\n  emitter: emitter\n}\n","'use strict'\n\nmodule.exports = (peer) => {\n  if (peer.id && (typeof peer.id.toB58String === 'function')) {\n    peer = peer.id\n  }\n  return peer.toB58String()\n}\n","'use strict'\n\nconst EventEmitter = require('events')\nconst pull = require('pull-stream')\nconst Pushable = require('pull-pushable')\n\nconst PROTOCOL = require('./protocol')\nconst encoding = require('./encoding')\nconst getPeerId = require('./peer-id')\n\nmodule.exports = class Connection extends EventEmitter {\n  constructor (id, ipfs, room) {\n    super()\n    this._id = id\n    this._ipfs = ipfs\n    this._room = room\n    this._connection = null\n    this._connecting = false\n  }\n\n  push (message) {\n    if (this._connection) {\n      this._connection.push(encoding(message))\n    } else {\n      this.once('connect', () => this.push(message))\n      if (!this._connecting) {\n        this._getConnection()\n      }\n    }\n  }\n\n  stop () {\n    if (this._connection) {\n      this._connection.end()\n    }\n  }\n\n  _getConnection () {\n    this._connecting = true\n    this._getPeerAddresses(this._id, (err, peerAddresses) => {\n      if (err) {\n        this.emit('error', err)\n        return // early\n      }\n\n      if (!peerAddresses.length) {\n        this.emit('disconnect')\n        return // early\n      }\n\n      this._ipfs._libp2pNode.dialProtocol(peerAddresses[0], PROTOCOL, (err, conn) => {\n        if (err) {\n          this.emit('disconnect')\n          return // early\n        }\n        this._connecting = false\n        const pushable = Pushable()\n        this._connection = pushable\n        pull(\n          pushable,\n          conn,\n          pull.onEnd(() => {\n            delete this._connection\n            this.emit('disconnect')\n          })\n        )\n        this.emit('connect', pushable)\n      })\n    })\n  }\n\n  _getPeerAddresses (peerId, callback) {\n    this._ipfs.swarm.peers((err, peersAddresses) => {\n      if (err) {\n        callback(err)\n        return // early\n      }\n\n      callback(\n        null,\n        peersAddresses\n          .filter((peerAddress) => getPeerId(peerAddress.peer) === peerId)\n          .map(peerAddress => peerAddress.peer))\n    })\n  }\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.at` without support for individual paths.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {string[]} paths The property paths of elements to pick.\n * @returns {Array} Returns the picked elements.\n */\nfunction baseAt(object, paths) {\n  var index = -1,\n      isNil = object == null,\n      length = paths.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = isNil ? undefined : get(object, paths[index]);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.pullAt` without support for individual\n * indexes or capturing the removed elements.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {number[]} indexes The indexes of elements to remove.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAt(array, indexes) {\n  var length = array ? indexes.length : 0,\n      lastIndex = length - 1;\n\n  while (length--) {\n    var index = indexes[length];\n    if (length == lastIndex || index !== previous) {\n      var previous = index;\n      if (isIndex(index)) {\n        splice.call(array, index, 1);\n      }\n      else if (!isKey(index, array)) {\n        var path = castPath(index),\n            object = parent(array, path);\n\n        if (object != null) {\n          delete object[toKey(last(path))];\n        }\n      }\n      else {\n        delete array[toKey(index)];\n      }\n    }\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\n\n/**\n * Removes elements from `array` corresponding to `indexes` and returns an\n * array of removed elements.\n *\n * **Note:** Unlike `_.at`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = ['a', 'b', 'c', 'd'];\n * var pulled = _.pullAt(array, [1, 3]);\n *\n * console.log(array);\n * // => ['a', 'c']\n *\n * console.log(pulled);\n * // => ['b', 'd']\n */\nvar pullAt = baseRest(function(array, indexes) {\n  indexes = baseFlatten(indexes, 1);\n\n  var length = array ? array.length : 0,\n      result = baseAt(array, indexes);\n\n  basePullAt(array, arrayMap(indexes, function(index) {\n    return isIndex(index, length) ? +index : index;\n  }).sort(compareAscending));\n\n  return result;\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = pullAt;\n","'use strict'\n\nconst cloneDeep = require('lodash.clonedeep')\nconst debug = require('debug')('hyperdiff')\nconst pullAt = require('lodash.pullat')\n\nconst isPresent = (itemIndex) => itemIndex !== -1\n\nfunction GET_INITIAL_STATE () {\n  return { common: [], removed: [] }\n}\n\nfunction hasItemWithProps (collection, item, props) {\n  return props.every(prop => item[prop] === collection[prop])\n}\n\nfunction indexOf (collection, item, props) {\n  return collection.indexOf(item)\n}\n\nfunction findIndexWithProps (collection, item, props) {\n  return collection.findIndex(function (origItem) {\n    return hasItemWithProps(origItem, item, props)\n  })\n}\n\nfunction determinateCollections (orig, dist) {\n  return {first: orig, second: cloneDeep(dist)}\n}\n\nfunction determinateFindIndex (props) {\n  return props ? findIndexWithProps : indexOf\n}\n\nfunction hyperdiff (orig, dist, props) {\n  const {first, second} = determinateCollections(orig, dist)\n  const findIndex = determinateFindIndex(props)\n  debug('preconditions first=%j second=%j findIndex=%s', first, second, findIndex.name)\n\n  const results = first.reduce(function (acc, item, index) {\n    const itemIndex = findIndex(second, item, props)\n    const destination = isPresent(itemIndex) ? 'common' : 'removed'\n    acc[destination].push(item)\n    pullAt(second, itemIndex)\n    debug('index=%s value=%s collection=%s', index, item, destination)\n    return acc\n  }, GET_INITIAL_STATE())\n\n  results.added = second\n  debug('added=%j removed=%j common%j', results.added, results.removed, results.common)\n  return results\n}\n\nmodule.exports = hyperdiff\n","'use strict'\n\nconst diff = require('hyperdiff')\nconst EventEmitter = require('events')\nconst timers = require('timers')\nconst clone = require('lodash.clonedeep')\nconst Buffer = require('safe-buffer').Buffer\n\nconst PROTOCOL = require('./protocol')\nconst Connection = require('./connection')\nconst encoding = require('./encoding')\nconst directConnection = require('./direct-connection-handler')\n\nconst DEFAULT_OPTIONS = {\n  pollInterval: 1000\n}\n\nmodule.exports = (ipfs, topic, options) => {\n  return new PubSubRoom(ipfs, topic, options)\n}\n\nclass PubSubRoom extends EventEmitter {\n  constructor (ipfs, topic, options) {\n    super()\n    this._ipfs = ipfs\n    this._topic = topic\n    this._options = Object.assign({}, clone(DEFAULT_OPTIONS), clone(options))\n    this._peers = []\n    this._connections = {}\n\n    this._handleDirectMessage = this._handleDirectMessage.bind(this)\n\n    if (!this._ipfs.pubsub) {\n      throw new Error('This IPFS node does not have pubsub.')\n    }\n\n    if (this._ipfs.isOnline()) {\n      this._start()\n    } else {\n      this._ipfs.on('ready', this._start.bind(this))\n    }\n\n    this._ipfs.on('stop', this.leave.bind(this))\n  }\n\n  getPeers () {\n    return this._peers.slice(0)\n  }\n\n  hasPeer (peer) {\n    return this._peers.indexOf(peer) >= 0\n  }\n\n  leave () {\n    timers.clearInterval(this._interval)\n    Object.keys(this._connections).forEach((peer) => {\n      this._connections[peer].stop()\n    })\n    directConnection.emitter.removeListener(this._topic, this._handleDirectMessage)\n    this.emit('stop')\n  }\n\n  broadcast (_message) {\n    let message = encoding(_message)\n    this._ipfs.pubsub.publish(this._topic, message, (err) => {\n      if (err) {\n        this.emit('error', err)\n      }\n    })\n  }\n\n  sendTo (peer, message) {\n    let conn = this._connections[peer]\n    if (!conn) {\n      conn = new Connection(peer, this._ipfs, this)\n      conn.on('error', (err) => this.emit('error', err))\n      this._connections[peer] = conn\n\n      conn.once('disconnect', () => {\n        delete this._connections[peer]\n        this._peers = this._peers.filter((p) => p !== peer)\n        this.emit('peer left', peer)\n      })\n    }\n\n    // We should use the same sequence number generation as js-libp2p-floosub does:\n    // const seqno = Buffer.from(utils.randomSeqno())\n\n    // Until we figure out a good way to bring in the js-libp2p-floosub's randomSeqno\n    // generator, let's use 0 as the sequence number for all private messages\n    // const seqno = Buffer.from([0])\n    const seqno = Buffer.from([0])\n\n    const msg = {\n      to: peer,\n      from: this._ipfs._peerInfo.id.toB58String(),\n      data: Buffer.from(message).toString('hex'),\n      seqno: seqno.toString('hex'),\n      topicIDs: [ this._topic ],\n      topicCIDs: [ this._topic ]\n    }\n\n    conn.push(Buffer.from(JSON.stringify(msg)))\n  }\n\n  _start () {\n    this._interval = timers.setInterval(\n      this._pollPeers.bind(this),\n      this._options.pollInterval)\n\n    const listener = this._onMessage.bind(this)\n    this._ipfs.pubsub.subscribe(this._topic, listener, (err) => {\n      if (err) {\n        this.emit('error', err)\n      } else {\n        this.emit('subscribed', this._topic)\n      }\n    })\n\n    this.once('stop', () => {\n      this._ipfs.pubsub.unsubscribe(this._topic, listener)\n    })\n\n    this._ipfs._libp2pNode.handle(PROTOCOL, directConnection.handler)\n\n    directConnection.emitter.on(this._topic, this._handleDirectMessage)\n  }\n\n  _pollPeers () {\n    this._ipfs.pubsub.peers(this._topic, (err, _newPeers) => {\n      if (err) {\n        this.emit('error', err)\n        return // early\n      }\n\n      const newPeers = _newPeers.sort()\n\n      if (this._emitChanges(newPeers)) {\n        this._peers = newPeers\n      }\n    })\n  }\n\n  _emitChanges (newPeers) {\n    const differences = diff(this._peers, newPeers)\n\n    differences.added.forEach((addedPeer) => this.emit('peer joined', addedPeer))\n    differences.removed.forEach((removedPeer) => this.emit('peer left', removedPeer))\n\n    return differences.added.length > 0 || differences.removed.length > 0\n  }\n\n  _onMessage (message) {\n    this.emit('message', message)\n  }\n\n  _handleDirectMessage (message) {\n    if (message.to === this._ipfs._peerInfo.id.toB58String()) {\n      const m = Object.assign({}, message)\n      delete m.to\n      this.emit('message', m)\n    }\n  }\n}\n","'use strict'\n\nconst Room = require('ipfs-pubsub-room')\n\nconst Logger = require('logplease')\nconst logger = Logger.create(\"orbit-db.ipfs-pubsub\")\nLogger.setLogLevel('ERROR')\n\nconst maxTopicsOpen = 256\nlet topicsOpenCount = 0\n\nclass IPFSPubsub {\n  constructor(ipfs, id) {\n    this._ipfs = ipfs\n    this._id = id\n    this._subscriptions = {}\n\n    if (this._ipfs.pubsub === null)\n      logger.error(\"The provided version of ipfs doesn't have pubsub support. Messages will not be exchanged.\")\n\n    this._handleMessage = this._handleMessage.bind(this)\n\n    // Bump up the number of listeners we can have open,\n    // ie. number of databases replicating\n    if (this._ipfs.setMaxListeners)\n      this._ipfs.setMaxListeners(maxTopicsOpen)\n  }\n\n  subscribe(topic, onMessageCallback, onNewPeerCallback) {\n    if(!this._subscriptions[topic]) {\n      const room = Room(this._ipfs, topic)\n\n      room.on('error', (e) => {\n        logger.error(\"Pubsub Error:\", e)\n      })\n\n      room.on('message', (message) => {\n        this._handleMessage(message)\n      })\n\n      room.on('peer joined', (peer) => {\n        logger.debug(\"Peer connected:\", topic, topic === room._topic)\n        if (this._subscriptions[topic]) {\n          this._subscriptions[topic].onNewPeer(topic, peer, room)\n        } else {\n          logger.warn('Peer joined a room we don\\'t have a subscription for')\n          logger.warn(peer, room._topic, topic)\n        }\n      })\n\n      room.on('subscribed', () => {\n        this._subscriptions[topic] = { \n          room: room, \n          onMessage: onMessageCallback, \n          onNewPeer: onNewPeerCallback \n        }\n        topicsOpenCount ++\n        logger.debug(\"Topics open:\", topicsOpenCount)\n      })\n\n    }\n  }\n\n  unsubscribe(hash) {\n    if(this._subscriptions[hash]) {\n      this._subscriptions[hash].room.leave()\n      this._subscriptions[hash].room = null\n      delete this._subscriptions[hash]\n      logger.debug(`Unsubscribed from '${hash}'`)\n      topicsOpenCount --\n      logger.debug(\"Topics open:\", topicsOpenCount)\n    }\n  }\n\n  publish(hash, message) {\n    if(this._subscriptions[hash] && this._subscriptions[hash].room && this._ipfs.pubsub) {\n      this._subscriptions[hash].room.broadcast(Buffer.from(JSON.stringify(message)))\n    }\n  }\n\n  disconnect() {\n    Object.keys(this._subscriptions)\n      .forEach((e) => this.unsubscribe(e))\n\n    this._subscriptions = {}\n  }\n\n\n  _handleMessage(message) {\n    // Don't process our own messages\n    if (message.from === this._id)\n      return\n\n    // Get the message content and a subscription\n    let content, subscription, topicId\n    try {\n      // Get the topic\n      topicId = message.topicIDs[0]\n      content = JSON.parse(message.data)\n      subscription = this._subscriptions[topicId]\n    } catch (e) {\n      logger.error(e)\n      logger.error('Couldn\\'t parse pubsub message:', message)\n    }\n\n    if(subscription && subscription.onMessage && content) {\n      subscription.onMessage(topicId, content)\n    }\n  }\n}\n\nmodule.exports = IPFSPubsub\n","module.exports = require('./src/ipfs-pubsub')\n","'use strict';\nmodule.exports = (iterable, mapper, opts) => new Promise((resolve, reject) => {\n\topts = Object.assign({\n\t\tconcurrency: Infinity\n\t}, opts);\n\n\tconst concurrency = opts.concurrency;\n\n\tif (concurrency < 1) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet iterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIdx = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIdx;\n\t\tcurrentIdx++;\n\n\t\tif (nextItem.done) {\n\t\t\titerableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(el => mapper(el, i))\n\t\t\t.then(\n\t\t\t\tval => {\n\t\t\t\t\tret[i] = val;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (iterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n","'use strict'\n\nclass DocumentIndex {\n  constructor() {\n    this._index = {}\n  }\n\n  get(key) {\n    return this._index[key]\n  }\n\n  updateIndex(oplog, onProgressCallback) {\n    const reducer = (handled, item, idx) => {\n      // if (handled.indexOf(item.payload.key) === -1) {\n      if (handled[item.payload.key] !== true) {\n        // handled.push(item.payload.key)\n        handled[item.payload.key] = true\n        if(item.payload.op === 'PUT') {\n          this._index[item.payload.key] = item.payload.value\n        } else if (item.payload.op === 'DEL') {\n          delete this._index[item.payload.key]\n        }\n      }\n      if (onProgressCallback) onProgressCallback(item, idx)\n      return handled\n    }\n\n    oplog.values\n      .slice()\n      .reverse()\n      .reduce(reducer, {})\n  }\n}\n\nmodule.exports = DocumentIndex\n","'use strict'\n\nconst Store = require('orbit-db-store')\nconst DocumentIndex = require('./DocumentIndex')\nconst pMap = require('p-map')\nconst Readable = require('readable-stream')\n\nconst replaceAll = (str, search, replacement) => str.toString().split(search).join(replacement)\n\nclass DocumentStore extends Store {\n  constructor(ipfs, id, dbname, options) {\n    if (!options) options = {}\n    if (!options.indexBy) Object.assign(options, { indexBy: '_id' })\n    if (!options.Index) Object.assign(options, { Index: DocumentIndex })\n    super(ipfs, id, dbname, options)\n    this._type = 'docstore'\n  }\n\n  get(key, caseSensitive = false) {\n    key = key.toString()\n    const terms = key.split(' ')\n    key = terms.length > 1 ? replaceAll(key, '.', ' ').toLowerCase() : key.toLowerCase()\n\n    const search = (e) => {\n      if (terms.length > 1) {\n        return replaceAll(e, '.', ' ').toLowerCase().indexOf(key) !== -1\n      }\n      return e.toLowerCase().indexOf(key) !== -1\n    }\n    const mapper = e => this._index.get(e)\n    const filter = e => caseSensitive\n      ? e.indexOf(key) !== -1 \n      : search(e)\n\n    return Object.keys(this._index._index)\n      .filter(filter)\n      .map(mapper)\n  }\n\n  query(mapper) {\n    return Object.keys(this._index._index)\n      .map((e) => this._index.get(e))\n      .filter((e) => mapper(e))\n  }\n\n  batchPut(docs, onProgressCallback) {\n    const mapper = (doc, idx) => {\n      return this._addOperationBatch(\n        {\n          op: 'PUT',\n          key: doc[this.options.indexBy],\n          value: doc\n        },\n        true,\n        idx === docs.length - 1,\n        onProgressCallback\n      )\n    }\n\n    return pMap(docs, mapper, { concurrency: 1 })\n      .then(() => this.saveSnapshot())\n  }\n\n  put(doc) {\n    if (!doc[this.options.indexBy])\n      throw new Error(`The provided document doesn't contain field '${this.options.indexBy}'`)\n\n    return this._addOperation({\n      op: 'PUT',\n      key: doc[this.options.indexBy],\n      value: doc\n    })\n  }\n\n  del(key) {\n    if (!this._index.get(key))\n      throw new Error(`No entry with key '${key}' in the database`)\n\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    })\n  }\n}\n\nmodule.exports = DocumentStore","'use strict'\n\nexports.deepEqual = (a, b) => {\n  const propsA = Object.getOwnPropertyNames(a)\n  const propsB = Object.getOwnPropertyNames(b)\n\n  if(propsA.length !== propsB.length)\n    return false\n\n  for(let i = 0; i < propsA.length; i ++) {\n    const prop = propsA[i]\n    if(a[prop] !== b[prop])\n      return false\n  }\n\n  return true\n}\n\nclass OperationTuple3 {\n  constructor (value, added, removed) {\n    this.value = value\n    this.added = new Set(added)\n    this.removed = new Set(removed)\n  }\n\n  static create (value, added, removed) {\n    return new OperationTuple3(value, added, removed)\n  }\n\n  static from (json) {\n    return OperationTuple3.create(json.value, json.added, json.removed)\n  }\n}\n\nexports.OperationTuple3 = OperationTuple3\n","'use strict'\n\nconst Counter = require('crdts/src/G-Counter')\n\nclass CounterIndex {\n  constructor(id) {\n    this._index = new Counter(id)\n  }\n\n  get() {\n    return this._index\n  }\n\n  updateIndex(oplog) {\n    if(this._index) {\n      const createCounter = e => Counter.from(e.payload.value)\n      const mergeToIndex = e => this._index.merge(e)\n      oplog.values.filter(e => e && e.payload.op === 'COUNTER')\n        .map(createCounter)\n        .forEach(mergeToIndex)\n    }\n  }\n}\n\nmodule.exports = CounterIndex\n","'use strict'\n\nconst Store = require('orbit-db-store')\nconst CounterIndex = require('./CounterIndex')\nconst Counter = require('crdts/src/G-Counter')\n\nclass CounterStore extends Store {\n  constructor(ipfs, id, dbname, options = {}) {\n    if(!options.Index) Object.assign(options, { Index: CounterIndex })\n    super(ipfs, id, dbname, options)\n    this._type = 'counter'\n  }\n\n  get value() {\n    return this._index.get().value\n  }\n\n  inc(amount) {\n    const counter = new Counter(this.id, Object.assign({}, this._index.get()._counters))\n    counter.increment(amount)\n    return this._addOperation({\n      op: 'COUNTER',\n      key: null,\n      value: counter.toJSON(),\n    })\n  }\n}\n\nmodule.exports = CounterStore\n","'use strict'\n\nclass KeyValueIndex {\n  constructor() {\n    this._index = {}\n  }\n\n  get(key) {\n    return this._index[key]\n  }\n\n  updateIndex(oplog) {\n    oplog.values\n      .slice()\n      .reverse()\n      .reduce((handled, item) => {\n        if(!handled.includes(item.payload.key)) {\n          handled.push(item.payload.key)\n          if(item.payload.op === 'PUT') {\n            this._index[item.payload.key] = item.payload.value\n          } else if(item.payload.op === 'DEL') {\n            delete this._index[item.payload.key]\n          }\n        }\n        return handled\n      }, [])\n  }\n}\n\nmodule.exports = KeyValueIndex\n","'use strict'\n\nconst Store         = require('orbit-db-store')\nconst KeyValueIndex = require('./KeyValueIndex')\n\nclass KeyValueStore extends Store {\n  constructor(ipfs, id, dbname, options) {\n    let opts = Object.assign({}, { Index: KeyValueIndex })\n    Object.assign(opts, options)\n    super(ipfs, id, dbname, opts)\n    this._type = 'keyvalue'\n  }\n\n  get(key) {\n    return this._index.get(key)\n  }\n\n  set(key, data) {\n    return this.put(key, data)\n  }\n\n  put(key, data) {\n    return this._addOperation({\n      op: 'PUT',\n      key: key,\n      value: data\n    })\n  }\n\n  del(key) {\n    return this._addOperation({\n      op: 'DEL',\n      key: key,\n      value: null\n    })\n  }\n}\n\nmodule.exports = KeyValueStore\n","'use strict'\n\nclass FeedIndex {\n  constructor() {\n    this._index = {}\n  }\n\n  get() {\n    return Object.keys(this._index).map((f) => this._index[f])\n  }\n\n  updateIndex(oplog) {\n    this._index = {}\n    oplog.values.reduce((handled, item) => {\n      if(!handled.includes(item.hash)) {\n        handled.push(item.hash)\n        if(item.payload.op === 'ADD') {\n          this._index[item.hash] = item\n        } else if(item.payload.op === 'DEL') {\n          delete this._index[item.payload.value]\n        }\n      }\n      return handled\n    }, [])\n  }\n}\n\nmodule.exports = FeedIndex\n","'use strict'\n\nconst EventStore = require('orbit-db-eventstore')\nconst FeedIndex  = require('./FeedIndex')\n\nclass FeedStore extends EventStore {\n  constructor (ipfs, id, dbname, options) {\n    if(!options) options = {}\n    if(!options.Index) Object.assign(options, { Index: FeedIndex })\n    super(ipfs, id, dbname, options)\n    this._type = 'feed'\n  }\n\n  remove (hash) {\n    return this.del(hash)\n  }\n\n  del (hash) {\n    const operation = {\n      op: 'DEL',\n      key: null,\n      value: hash\n    }\n    return this._addOperation(operation)\n  }\n}\n\nmodule.exports = FeedStore\n","'use strict'\n\nclass EventIndex {\n  constructor() {\n    this._index = null\n  }\n\n  get() {\n    return this._index ? this._index.values : []\n  }\n\n  updateIndex(oplog) {\n    this._index = oplog\n  }\n}\n\nmodule.exports = EventIndex\n","'use strict'\n\nconst path = require('path')\nconst EventStore = require('orbit-db-eventstore')\nconst FeedStore = require('orbit-db-feedstore')\nconst KeyValueStore = require('orbit-db-kvstore')\nconst CounterStore = require('orbit-db-counterstore')\nconst DocumentStore = require('orbit-db-docstore')\nconst Pubsub = require('orbit-db-pubsub')\nconst Cache = require('orbit-db-cache')\nconst Keystore = require('orbit-db-keystore')\nconst AccessController = require('./ipfs-access-controller')\nconst OrbitDBAddress = require('./orbit-db-address')\nconst createDBManifest = require('./db-manifest')\n\nconst Logger = require('logplease')\nconst logger = Logger.create(\"orbit-db\")\nLogger.setLogLevel('NONE')\n\n// Mapping for 'database type' -> Class\nlet databaseTypes = {\n  'counter': CounterStore,\n  'eventlog': EventStore,\n  'feed': FeedStore,\n  'docstore': DocumentStore,\n  'keyvalue': KeyValueStore,\n}\n\nclass OrbitDB {\n  constructor(ipfs, directory, options = {}) {\n    this._ipfs = ipfs\n    this.id = options.peerId || (this._ipfs._peerInfo ? this._ipfs._peerInfo.id._idB58String : 'default')\n    this._pubsub = options && options.broker \n      ? new options.broker(this._ipfs) \n      : new Pubsub(this._ipfs, this.id)\n    this.stores = {}\n    this.directory = directory || './orbitdb'\n    this.keystore = options.keystore || Keystore.create(path.join(this.directory, this.id, '/keystore'))\n    this.key = this.keystore.getKey(this.id) || this.keystore.createKey(this.id)\n  }\n\n  /* Databases */\n  async feed (address, options = {}) {\n    options = Object.assign({ create: true, type: 'feed' }, options)\n    return this.open(address, options)\n  }\n\n  async log (address, options) {\n    options = Object.assign({ create: true, type: 'eventlog' }, options)\n    return this.open(address, options)\n  }\n\n  async eventlog (address, options = {}) {\n    return this.log(address, options)\n  }\n\n  async keyvalue (address, options) {\n    options = Object.assign({ create: true, type: 'keyvalue' }, options)\n    return this.open(address, options)\n  }\n\n  async kvstore (address, options) {\n    return this.keyvalue(address, options)\n  }\n\n  async counter (address, options = {}) {\n    options = Object.assign({ create: true, type: 'counter' }, options)\n    return this.open(address, options)\n  }\n\n  async docs (address, options = {}) {\n    options = Object.assign({ create: true, type: 'docstore' }, options)\n    return this.open(address, options)\n  }\n\n  async docstore (address, options = {}) {\n    return this.docs(address, options)\n  }\n\n  async disconnect () {\n    // Close all open databases\n    const databases = Object.values(this.stores)\n    for (let db of databases) {\n      await db.close()\n      delete this.stores[db.address.toString()]\n    }\n\n    // Disconnect from pubsub\n    if (this._pubsub) \n      this._pubsub.disconnect()\n\n    // Remove all databases from the state\n    this.stores = {}\n  }\n\n  // Alias for disconnect()\n  async stop () {\n    await this.disconnect()\n  }\n\n  /* Private methods */\n  async _createStore (type, address, options) {\n    // Get the type -> class mapping\n    const Store = databaseTypes[type]\n\n    if (!Store)\n      throw new Error(`Invalid database type '${type}'`)\n\n    let accessController\n    if (options.accessControllerAddress) {\n      accessController = new AccessController(this._ipfs)\n      await accessController.load(options.accessControllerAddress)\n    }\n\n    const cache = await this._loadCache(this.directory, address)\n\n    const opts = Object.assign({ replicate: true }, options, { \n      accessController: accessController, \n      keystore: this.keystore,\n      cache: cache,\n    })\n\n    const store = new Store(this._ipfs, this.id, address, opts)\n    store.events.on('write', this._onWrite.bind(this))\n    store.events.on('closed', this._onClosed.bind(this))\n\n    // ID of the store is the address as a string\n    const addr = address.toString()\n    this.stores[addr] = store\n\n    if(opts.replicate && this._pubsub)\n      this._pubsub.subscribe(addr, this._onMessage.bind(this), this._onPeerConnected.bind(this))\n\n    return store\n  }\n\n  // Callback for local writes to the database. We the update to pubsub.\n  _onWrite (address, entry, heads) {\n    if(!heads) throw new Error(\"'heads' not defined\")\n    if(this._pubsub) this._pubsub.publish(address, heads)\n  }\n\n  // Callback for receiving a message from the network\n  async _onMessage (address, heads) {\n    const store = this.stores[address]\n    try {\n      logger.debug(`Received ${heads.length} heads for '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n      await store.sync(heads)\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n\n  // Callback for when a peer connected to a database\n  _onPeerConnected (address, peer, room) {\n    logger.debug(`New peer '${peer}' connected to '${address}'`)\n    const store = this.stores[address]\n    if (store) {\n      // Send the newly connected peer our latest heads\n      let heads = store._oplog.heads\n      if (heads.length > 0) {\n        logger.debug(`Send latest heads of '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n        room.sendTo(peer, JSON.stringify(heads))\n      }\n      store.events.emit('peer', peer)\n    }\n  }\n\n  // Callback when database was closed\n  _onClosed (address) {\n    logger.debug(`Database '${address}' was closed`)\n\n    // Remove the callback from the database\n    this.stores[address].events.removeAllListeners('closed')\n\n    // Unsubscribe from pubsub\n    if(this._pubsub)\n      this._pubsub.unsubscribe(address)\n\n    delete this.stores[address]\n  }\n\n  /* Create and Open databases */\n\n  /*\n    options = {\n      admin: [], // array of keys that are the admins of this database (same as write access)\n      write: [], // array of keys that can write to this database\n      directory: './orbitdb', // directory in which to place the database files\n      overwrite: false, // whether we should overwrite the existing database if it exists\n    }\n  */\n  async create (name, type, options = {}) {\n    logger.debug(`create()`)\n\n    if (!OrbitDB.isValidType(type))\n      throw new Error(`Invalid database type '${type}'`)\n\n    // The directory to look databases from can be passed in as an option\n    const directory = options.directory || this.directory\n    logger.debug(`Creating database '${name}' as ${type} in '${directory}'`)\n\n    if (OrbitDBAddress.isValid(name))\n      throw new Error(`Given database name is an address. Please give only the name of the database!`)\n\n    // Create an AccessController\n    const accessController = new AccessController(this._ipfs)\n    /* Disabled temporarily until we do something with the admin keys */\n    // Add admins of the database to the access controller\n    // if (options && options.admin) {\n    //   options.admin.forEach(e => accessController.add('admin', e))\n    // } else {\n    //   // Default is to add ourselves as the admin of the database\n    //   accessController.add('admin', this.key.getPublic('hex'))\n    // }\n    // Add keys that can write to the database\n    if (options && options.write && options.write.length > 0) {\n      options.write.forEach(e => accessController.add('write', e))\n    } else {\n      // Default is to add ourselves as the admin of the database\n      accessController.add('write', this.key.getPublic('hex'))\n    }\n    // Save the Access Controller in IPFS\n    const accessControllerAddress = await accessController.save()\n\n    // Save the manifest to IPFS\n    const manifestHash = await createDBManifest(this._ipfs, name, type, accessControllerAddress)\n\n    // Create the database address\n    const dbAddress = OrbitDBAddress.parse(path.join('/orbitdb', manifestHash, name))\n\n    // // Load local cache\n    const haveDB = await this._loadCache(directory, dbAddress)\n      .then(cache => cache ? cache.get(path.join(dbAddress.toString(), '_manifest')) : null)\n      .then(data => data !== undefined && data !== null)\n\n    if (haveDB && !options.overwrite)\n      throw new Error(`Database '${dbAddress}' already exists!`)\n\n    // Save the database locally\n    await this._saveDBManifest(directory, dbAddress)\n\n    logger.debug(`Created database '${dbAddress}'`)\n\n    // Open the database\n    return this.open(dbAddress, options)\n  }\n\n  /*\n      options = {\n        localOnly: false // if set to true, throws an error if database can't be found locally\n        create: false // wether to create the database\n        type: TODO\n        overwrite: TODO\n\n      }\n   */\n  async open (address, options = {}) {\n    logger.debug(`open()`)\n    options = Object.assign({ localOnly: false, create: false }, options)\n    logger.debug(`Open database '${address}'`)\n\n    // The directory to look databases from can be passed in as an option\n    const directory = options.directory || this.directory\n    logger.debug(`Look from '${directory}'`)\n\n    // If address is just the name of database, check the options to crate the database\n    if (!OrbitDBAddress.isValid(address)) {\n      if (!options.create) {\n        throw new Error(`'options.create' set to 'false'. If you want to create a database, set 'options.create' to 'true'.`)\n      } else if (options.create && !options.type) {\n        throw new Error(`Database type not provided! Provide a type with 'options.type' (${OrbitDB.databaseTypes.join('|')})`)\n      } else {\n        logger.warn(`Not a valid OrbitDB address '${address}', creating the database`)\n        options.overwrite = options.overwrite ? options.overwrite : true\n        return this.create(address, options.type, options)\n      }\n    }\n\n    // Parse the database address\n    const dbAddress = OrbitDBAddress.parse(address)\n\n    // Check if we have the database\n    const haveDB = await this._loadCache(directory, dbAddress)\n      .then(cache => cache ? cache.get(path.join(dbAddress.toString(), '_manifest')) : null)\n      .then(data => data !== undefined && data !== null)\n\n    logger.debug((haveDB ? 'Found' : 'Didn\\'t find') + ` database '${dbAddress}'`)\n\n    // If we want to try and open the database local-only, throw an error\n    // if we don't have the database locally\n    if (options.localOnly && !haveDB) {\n      logger.error(`Database '${dbAddress}' doesn't exist!`)\n      throw new Error(`Database '${dbAddress}' doesn't exist!`)\n    }\n\n    logger.debug(`Loading Manifest for '${dbAddress}'`)\n\n    // Get the database manifest from IPFS\n    const dag = await this._ipfs.object.get(dbAddress.root)\n    const manifest = JSON.parse(dag.toJSON().data)\n    logger.debug(`Manifest for '${dbAddress}':\\n${JSON.stringify(manifest, null, 2)}`)\n\n    // Make sure the type from the manifest matches the type that was given as an option\n    if (options.type && manifest.type !== options.type)\n      throw new Error(`Database '${dbAddress}' is type '${manifest.type}' but was opened as '${options.type}'`)\n\n    // Save the database locally\n    await this._saveDBManifest(directory, dbAddress)\n\n    // Open the the database\n    options = Object.assign({}, options, { accessControllerAddress: manifest.accessController })\n    return this._createStore(manifest.type, dbAddress, options)\n  }\n\n  // Save the database locally\n  async _saveDBManifest (directory, dbAddress) {\n    const cache = await this._loadCache(directory, dbAddress)\n    await cache.set(path.join(dbAddress.toString(), '_manifest'), dbAddress.root)\n    logger.debug(`Saved manifest to IPFS as '${dbAddress.root}'`)\n  }\n\n  async _loadCache (directory, dbAddress) {\n    let cache\n    try {\n      cache = await Cache.load(directory, dbAddress)\n    } catch (e) {\n      console.log(e)\n      logger.error(\"Couldn't load Cache:\", e)\n    }\n\n    return cache\n  }\n\n  /**\n   * Returns supported database types as an Array of strings\n   * Eg. [ 'counter', 'eventlog', 'feed', 'docstore', 'keyvalue']\n   * @return {[Array]} [Supported database types]\n   */\n  static get databaseTypes () {\n    return Object.keys(databaseTypes)\n  }\n\n  static isValidType (type) {\n    return Object.keys(databaseTypes).includes(type)\n  }\n\n  static addDatabaseType (type, store) {\n    if (databaseTypes[type]) throw new Error(`Type already exists: ${type}`)\n    databaseTypes[type] = store\n  }\n\n  static create () {\n    return new Error('Not implemented yet!')\n  }\n\n  static open () {\n    return new Error('Not implemented yet!')\n  }\n}\n\nmodule.exports = OrbitDB\n","/* Copyright (c) 2013 Rod Vagg, MIT License */\n\nvar xtend                = require('xtend')\n  , AbstractIterator     = require('./abstract-iterator')\n  , AbstractChainedBatch = require('./abstract-chained-batch')\n\nfunction AbstractLevelDOWN (location) {\n  if (!arguments.length || location === undefined)\n    throw new Error('constructor requires at least a location argument')\n\n  if (typeof location != 'string')\n    throw new Error('constructor requires a location string argument')\n\n  this.location = location\n}\n\nAbstractLevelDOWN.prototype.open = function (options, callback) {\n  if (typeof options == 'function')\n    callback = options\n\n  if (typeof callback != 'function')\n    throw new Error('open() requires a callback argument')\n\n  if (typeof options != 'object')\n    options = {}\n\n  if (typeof this._open == 'function')\n    return this._open(options, callback)\n\n  process.nextTick(callback)\n}\n\nAbstractLevelDOWN.prototype.close = function (callback) {\n  if (typeof callback != 'function')\n    throw new Error('close() requires a callback argument')\n\n  if (typeof this._close == 'function')\n    return this._close(callback)\n\n  process.nextTick(callback)\n}\n\nAbstractLevelDOWN.prototype.get = function (key, options, callback) {\n  var err\n\n  if (typeof options == 'function')\n    callback = options\n\n  if (typeof callback != 'function')\n    throw new Error('get() requires a callback argument')\n\n  if (err = this._checkKeyValue(key, 'key', this._isBuffer))\n    return callback(err)\n\n  if (!this._isBuffer(key))\n    key = String(key)\n\n  if (typeof options != 'object')\n    options = {}\n\n  if (typeof this._get == 'function')\n    return this._get(key, options, callback)\n\n  process.nextTick(function () { callback(new Error('NotFound')) })\n}\n\nAbstractLevelDOWN.prototype.put = function (key, value, options, callback) {\n  var err\n\n  if (typeof options == 'function')\n    callback = options\n\n  if (typeof callback != 'function')\n    throw new Error('put() requires a callback argument')\n\n  if (err = this._checkKeyValue(key, 'key', this._isBuffer))\n    return callback(err)\n\n  if (err = this._checkKeyValue(value, 'value', this._isBuffer))\n    return callback(err)\n\n  if (!this._isBuffer(key))\n    key = String(key)\n\n  // coerce value to string in node, don't touch it in browser\n  // (indexeddb can store any JS type)\n  if (!this._isBuffer(value) && !process.browser)\n    value = String(value)\n\n  if (typeof options != 'object')\n    options = {}\n\n  if (typeof this._put == 'function')\n    return this._put(key, value, options, callback)\n\n  process.nextTick(callback)\n}\n\nAbstractLevelDOWN.prototype.del = function (key, options, callback) {\n  var err\n\n  if (typeof options == 'function')\n    callback = options\n\n  if (typeof callback != 'function')\n    throw new Error('del() requires a callback argument')\n\n  if (err = this._checkKeyValue(key, 'key', this._isBuffer))\n    return callback(err)\n\n  if (!this._isBuffer(key))\n    key = String(key)\n\n  if (typeof options != 'object')\n    options = {}\n\n  if (typeof this._del == 'function')\n    return this._del(key, options, callback)\n\n  process.nextTick(callback)\n}\n\nAbstractLevelDOWN.prototype.batch = function (array, options, callback) {\n  if (!arguments.length)\n    return this._chainedBatch()\n\n  if (typeof options == 'function')\n    callback = options\n\n  if (typeof callback != 'function')\n    throw new Error('batch(array) requires a callback argument')\n\n  if (!Array.isArray(array))\n    return callback(new Error('batch(array) requires an array argument'))\n\n  if (typeof options != 'object')\n    options = {}\n\n  var i = 0\n    , l = array.length\n    , e\n    , err\n\n  for (; i < l; i++) {\n    e = array[i]\n    if (typeof e != 'object')\n      continue\n\n    if (err = this._checkKeyValue(e.type, 'type', this._isBuffer))\n      return callback(err)\n\n    if (err = this._checkKeyValue(e.key, 'key', this._isBuffer))\n      return callback(err)\n\n    if (e.type == 'put') {\n      if (err = this._checkKeyValue(e.value, 'value', this._isBuffer))\n        return callback(err)\n    }\n  }\n\n  if (typeof this._batch == 'function')\n    return this._batch(array, options, callback)\n\n  process.nextTick(callback)\n}\n\n//TODO: remove from here, not a necessary primitive\nAbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {\n  if (   start == null\n      || end == null\n      || typeof start == 'function'\n      || typeof end == 'function') {\n    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')\n  }\n\n  if (typeof callback != 'function')\n    throw new Error('approximateSize() requires a callback argument')\n\n  if (!this._isBuffer(start))\n    start = String(start)\n\n  if (!this._isBuffer(end))\n    end = String(end)\n\n  if (typeof this._approximateSize == 'function')\n    return this._approximateSize(start, end, callback)\n\n  process.nextTick(function () {\n    callback(null, 0)\n  })\n}\n\nAbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {\n  var self = this\n\n  options = xtend(options)\n\n  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {\n    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)\n      delete options[o]\n  })\n\n  options.reverse = !!options.reverse\n\n  // fix `start` so it takes into account gt, gte, lt, lte as appropriate\n  if (options.reverse && options.lt)\n    options.start = options.lt\n  if (options.reverse && options.lte)\n    options.start = options.lte\n  if (!options.reverse && options.gt)\n    options.start = options.gt\n  if (!options.reverse && options.gte)\n    options.start = options.gte\n\n  if ((options.reverse && options.lt && !options.lte)\n    || (!options.reverse && options.gt && !options.gte))\n    options.exclusiveStart = true // start should *not* include matching key\n\n  return options\n}\n\nAbstractLevelDOWN.prototype.iterator = function (options) {\n  if (typeof options != 'object')\n    options = {}\n\n  options = this._setupIteratorOptions(options)\n\n  if (typeof this._iterator == 'function')\n    return this._iterator(options)\n\n  return new AbstractIterator(this)\n}\n\nAbstractLevelDOWN.prototype._chainedBatch = function () {\n  return new AbstractChainedBatch(this)\n}\n\nAbstractLevelDOWN.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj)\n}\n\nAbstractLevelDOWN.prototype._checkKeyValue = function (obj, type) {\n\n  if (obj === null || obj === undefined)\n    return new Error(type + ' cannot be `null` or `undefined`')\n\n  if (this._isBuffer(obj)) {\n    if (obj.length === 0)\n      return new Error(type + ' cannot be an empty Buffer')\n  } else if (String(obj) === '')\n    return new Error(type + ' cannot be an empty String')\n}\n\nmodule.exports.AbstractLevelDOWN    = AbstractLevelDOWN\nmodule.exports.AbstractIterator     = AbstractIterator\nmodule.exports.AbstractChainedBatch = AbstractChainedBatch\n","'use strict'\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = (_message) => {\n  let message = _message\n  if (!Buffer.isBuffer(message)) {\n    message = Buffer.from(message)\n  }\n  return message\n}\n","'use strict'\n\nmodule.exports = 'ipfs-pubsub-room/v2'\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","'use strict'\n\nconst { deepEqual } = require('./utils')\nconst sum = (acc, val) => acc + val\n\n/**\n * G-Counter\n *\n * Operation-based Increment-Only Counter CRDT\n *\n * Sources: \n * \"A comprehensive study of Convergent and Commutative Replicated Data Types\"\n * http://hal.upmc.fr/inria-00555588/document, \"3.1.1 Op-based counter and 3.1.2  State-based increment-only Counter (G-Counter)\"\n */\n\nclass GCounter {\n  constructor (id, counter) {\n    this.id = id\n    this._counters = counter ? counter : {}\n    this._counters[this.id] = this._counters[this.id] ? this._counters[this.id] : 0\n  }\n\n  get value () {\n    return Object.values(this._counters).reduce(sum, 0)\n  }\n\n  increment (amount) {\n    if (amount && amount < 1) \n      return\n\n    if (amount === undefined || amount === null)\n      amount = 1\n\n    this._counters[this.id] = this._counters[this.id] + amount\n  }\n\n  merge (other) {\n    // Go through each counter in the other counter\n    Object.entries(other._counters).forEach(([id, value]) => {\n      // Take the maximum of the counter value we have or the counter value they have\n      this._counters[id] = Math.max(this._counters[id] || 0, value)\n    })\n  }\n\n  toJSON () {\n    return { \n      id: this.id, \n      counters: this._counters \n    }\n  }\n\n  isEqual (other) {\n    return GCounter.isEqual(this, other)\n  }\n\n  static from (json) {\n    return new GCounter(json.id, json.counters)\n  }\n\n  static isEqual (a, b) {\n    if(a.id !== b.id)\n      return false\n\n    return deepEqual(a._counters, b._counters)\n  }\n}\n\nmodule.exports = GCounter\n","'use strict'\n\nconst Store = require('orbit-db-store')\nconst EventIndex = require('./EventIndex')\n\n// TODO: generalize the Iterator functions and spin to its own module\n\nclass EventStore extends Store {\n  constructor(ipfs, id, dbname, options = {}) {\n    if(options.Index === undefined) Object.assign(options, { Index: EventIndex })\n    super(ipfs, id, dbname, options)\n    this._type = 'eventlog'\n  }\n\n  add(data) {\n    return this._addOperation({\n      op: 'ADD',\n      key: null,\n      value: data\n    })\n  }\n\n  get(hash) {\n    return this.iterator({ gte: hash, limit: 1 }).collect()[0]\n  }\n\n  iterator(options) {\n    const messages = this._query(options)\n    let currentIndex = 0\n    let iterator = {\n      [Symbol.iterator]() {\n        return this\n      },\n      next() {\n        let item = { value: null, done: true }\n        if(currentIndex < messages.length) {\n          item = { value: messages[currentIndex], done: false }\n          currentIndex ++\n        }\n        return item\n      },\n      collect: () => messages\n    }\n\n    return iterator\n  }\n\n  _query(opts) {\n    if(!opts) opts = {}\n\n    const amount = opts.limit ? (opts.limit > -1 ? opts.limit : this._index.get().length) : 1 // Return 1 if no limit is provided\n    const events = this._index.get().slice()\n    let result = []\n\n    if(opts.gt || opts.gte) {\n      // Greater than case\n      result = this._read(events, opts.gt ? opts.gt : opts.gte, amount, opts.gte ? true : false)\n    } else {\n      // Lower than and lastN case, search latest first by reversing the sequence\n      result = this._read(events.reverse(), opts.lt ? opts.lt : opts.lte, amount, opts.lte || !opts.lt).reverse()\n    }\n\n    return result\n  }\n\n  _read(ops, hash, amount, inclusive) {\n    // Find the index of the gt/lt hash, or start from the beginning of the array if not found\n    const index = ops.map((e) => e.hash).indexOf(hash)\n    let startIndex = Math.max(index, 0)\n    // If gte/lte is set, we include the given hash, if not, start from the next element\n    startIndex += inclusive ? 0 : 1\n    // Slice the array to its requested size\n    const res = ops.slice(startIndex).slice(0, amount)\n    return res\n  }\n}\n\nmodule.exports = EventStore\n"],"sourceRoot":""}